{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://dota-extension/webpack/runtime/require chunk loading","webpack://dota-extension/./node_modules/node-domexception/index.js","webpack://dota-extension/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js","webpack://dota-extension/external commonjs \"vscode\"","webpack://dota-extension/external node-commonjs \"buffer\"","webpack://dota-extension/external node-commonjs \"node:process\"","webpack://dota-extension/external node-commonjs \"node:stream/web\"","webpack://dota-extension/external node-commonjs \"worker_threads\"","webpack://dota-extension/./node_modules/fetch-blob/streams.cjs","webpack://dota-extension/./node_modules/fetch-blob/file.js","webpack://dota-extension/external node-commonjs \"node:fs\"","webpack://dota-extension/external node-commonjs \"node:path\"","webpack://dota-extension/./node_modules/fetch-blob/from.js","webpack://dota-extension/./node_modules/fetch-blob/index.js","webpack://dota-extension/./node_modules/formdata-polyfill/esm.min.js","webpack://dota-extension/external node-commonjs \"node:http\"","webpack://dota-extension/external node-commonjs \"node:https\"","webpack://dota-extension/external node-commonjs \"node:zlib\"","webpack://dota-extension/external node-commonjs \"node:stream\"","webpack://dota-extension/external node-commonjs \"node:buffer\"","webpack://dota-extension/external node-commonjs \"node:util\"","webpack://dota-extension/./node_modules/node-fetch/src/errors/base.js","webpack://dota-extension/./node_modules/node-fetch/src/errors/fetch-error.js","webpack://dota-extension/./node_modules/node-fetch/src/utils/is.js","webpack://dota-extension/./node_modules/node-fetch/src/body.js","webpack://dota-extension/./node_modules/node-fetch/src/headers.js","webpack://dota-extension/./node_modules/node-fetch/src/utils/is-redirect.js","webpack://dota-extension/./node_modules/node-fetch/src/response.js","webpack://dota-extension/external node-commonjs \"node:url\"","webpack://dota-extension/external node-commonjs \"node:net\"","webpack://dota-extension/./node_modules/node-fetch/src/utils/referrer.js","webpack://dota-extension/./node_modules/node-fetch/src/request.js","webpack://dota-extension/./node_modules/node-fetch/src/errors/abort-error.js","webpack://dota-extension/./node_modules/node-fetch/src/index.js","webpack://dota-extension/./node_modules/node-fetch/src/utils/get-search.js","webpack://dota-extension/./node_modules/data-uri-to-buffer/dist/index.js","webpack://dota-extension/webpack/bootstrap","webpack://dota-extension/webpack/runtime/define property getters","webpack://dota-extension/webpack/runtime/ensure chunk","webpack://dota-extension/webpack/runtime/get javascript chunk filename","webpack://dota-extension/webpack/runtime/hasOwnProperty shorthand","webpack://dota-extension/webpack/runtime/make namespace object","webpack://dota-extension/./src/extension.ts"],"sourcesContent":["// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"loaded\", otherwise not loaded yet\nvar installedChunks = {\n\t179: 1\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++)\n\t\tinstalledChunks[chunkIds[i]] = 1;\n\n};\n\n// require() chunk loading for javascript\n__webpack_require__.f.require = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\tinstallChunk(require(\"./\" + __webpack_require__.u(chunkId)));\n\t\t} else installedChunks[chunkId] = 1;\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nif (!globalThis.DOMException) {\n  try {\n    const { MessageChannel } = require('worker_threads'),\n    port = new MessageChannel().port1,\n    ab = new ArrayBuffer()\n    port.postMessage(ab, [ab, ab])\n  } catch (err) {\n    err.constructor.name === 'DOMException' && (\n      globalThis.DOMException = err.constructor\n    )\n  }\n}\n\nmodule.exports = globalThis.DOMException\n","/**\n * web-streams-polyfill v3.2.1\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n}(this, (function (exports) { 'use strict';\n\n    /// <reference lib=\"es2015.symbol\" />\n    const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?\n        Symbol :\n        description => `Symbol(${description})`;\n\n    /// <reference lib=\"dom\" />\n    function noop() {\n        return undefined;\n    }\n    function getGlobals() {\n        if (typeof self !== 'undefined') {\n            return self;\n        }\n        else if (typeof window !== 'undefined') {\n            return window;\n        }\n        else if (typeof global !== 'undefined') {\n            return global;\n        }\n        return undefined;\n    }\n    const globals = getGlobals();\n\n    function typeIsObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    const rethrowAssertionErrorRejection = noop;\n\n    const originalPromise = Promise;\n    const originalPromiseThen = Promise.prototype.then;\n    const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n    const originalPromiseReject = Promise.reject.bind(originalPromise);\n    function newPromise(executor) {\n        return new originalPromise(executor);\n    }\n    function promiseResolvedWith(value) {\n        return originalPromiseResolve(value);\n    }\n    function promiseRejectedWith(reason) {\n        return originalPromiseReject(reason);\n    }\n    function PerformPromiseThen(promise, onFulfilled, onRejected) {\n        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n        // approximation.\n        return originalPromiseThen.call(promise, onFulfilled, onRejected);\n    }\n    function uponPromise(promise, onFulfilled, onRejected) {\n        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n    }\n    function uponFulfillment(promise, onFulfilled) {\n        uponPromise(promise, onFulfilled);\n    }\n    function uponRejection(promise, onRejected) {\n        uponPromise(promise, undefined, onRejected);\n    }\n    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n    }\n    function setPromiseIsHandledToTrue(promise) {\n        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n    }\n    const queueMicrotask = (() => {\n        const globalQueueMicrotask = globals && globals.queueMicrotask;\n        if (typeof globalQueueMicrotask === 'function') {\n            return globalQueueMicrotask;\n        }\n        const resolvedPromise = promiseResolvedWith(undefined);\n        return (fn) => PerformPromiseThen(resolvedPromise, fn);\n    })();\n    function reflectCall(F, V, args) {\n        if (typeof F !== 'function') {\n            throw new TypeError('Argument is not a function');\n        }\n        return Function.prototype.apply.call(F, V, args);\n    }\n    function promiseCall(F, V, args) {\n        try {\n            return promiseResolvedWith(reflectCall(F, V, args));\n        }\n        catch (value) {\n            return promiseRejectedWith(value);\n        }\n    }\n\n    // Original from Chromium\n    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n    const QUEUE_MAX_ARRAY_SIZE = 16384;\n    /**\n     * Simple queue structure.\n     *\n     * Avoids scalability issues with using a packed array directly by using\n     * multiple arrays in a linked list and keeping the array size bounded.\n     */\n    class SimpleQueue {\n        constructor() {\n            this._cursor = 0;\n            this._size = 0;\n            // _front and _back are always defined.\n            this._front = {\n                _elements: [],\n                _next: undefined\n            };\n            this._back = this._front;\n            // The cursor is used to avoid calling Array.shift().\n            // It contains the index of the front element of the array inside the\n            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n            this._cursor = 0;\n            // When there is only one node, size === elements.length - cursor.\n            this._size = 0;\n        }\n        get length() {\n            return this._size;\n        }\n        // For exception safety, this method is structured in order:\n        // 1. Read state\n        // 2. Calculate required state mutations\n        // 3. Perform state mutations\n        push(element) {\n            const oldBack = this._back;\n            let newBack = oldBack;\n            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                newBack = {\n                    _elements: [],\n                    _next: undefined\n                };\n            }\n            // push() is the mutation most likely to throw an exception, so it\n            // goes first.\n            oldBack._elements.push(element);\n            if (newBack !== oldBack) {\n                this._back = newBack;\n                oldBack._next = newBack;\n            }\n            ++this._size;\n        }\n        // Like push(), shift() follows the read -> calculate -> mutate pattern for\n        // exception safety.\n        shift() { // must not be called on an empty queue\n            const oldFront = this._front;\n            let newFront = oldFront;\n            const oldCursor = this._cursor;\n            let newCursor = oldCursor + 1;\n            const elements = oldFront._elements;\n            const element = elements[oldCursor];\n            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                newFront = oldFront._next;\n                newCursor = 0;\n            }\n            // No mutations before this point.\n            --this._size;\n            this._cursor = newCursor;\n            if (oldFront !== newFront) {\n                this._front = newFront;\n            }\n            // Permit shifted element to be garbage collected.\n            elements[oldCursor] = undefined;\n            return element;\n        }\n        // The tricky thing about forEach() is that it can be called\n        // re-entrantly. The queue may be mutated inside the callback. It is easy to\n        // see that push() within the callback has no negative effects since the end\n        // of the queue is checked for on every iteration. If shift() is called\n        // repeatedly within the callback then the next iteration may return an\n        // element that has been removed. In this case the callback will be called\n        // with undefined values until we either \"catch up\" with elements that still\n        // exist or reach the back of the queue.\n        forEach(callback) {\n            let i = this._cursor;\n            let node = this._front;\n            let elements = node._elements;\n            while (i !== elements.length || node._next !== undefined) {\n                if (i === elements.length) {\n                    node = node._next;\n                    elements = node._elements;\n                    i = 0;\n                    if (elements.length === 0) {\n                        break;\n                    }\n                }\n                callback(elements[i]);\n                ++i;\n            }\n        }\n        // Return the element that would be returned if shift() was called now,\n        // without modifying the queue.\n        peek() { // must not be called on an empty queue\n            const front = this._front;\n            const cursor = this._cursor;\n            return front._elements[cursor];\n        }\n    }\n\n    function ReadableStreamReaderGenericInitialize(reader, stream) {\n        reader._ownerReadableStream = stream;\n        stream._reader = reader;\n        if (stream._state === 'readable') {\n            defaultReaderClosedPromiseInitialize(reader);\n        }\n        else if (stream._state === 'closed') {\n            defaultReaderClosedPromiseInitializeAsResolved(reader);\n        }\n        else {\n            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n        }\n    }\n    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n    // check.\n    function ReadableStreamReaderGenericCancel(reader, reason) {\n        const stream = reader._ownerReadableStream;\n        return ReadableStreamCancel(stream, reason);\n    }\n    function ReadableStreamReaderGenericRelease(reader) {\n        if (reader._ownerReadableStream._state === 'readable') {\n            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        else {\n            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n        }\n        reader._ownerReadableStream._reader = undefined;\n        reader._ownerReadableStream = undefined;\n    }\n    // Helper functions for the readers.\n    function readerLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released reader');\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderClosedPromiseInitialize(reader) {\n        reader._closedPromise = newPromise((resolve, reject) => {\n            reader._closedPromise_resolve = resolve;\n            reader._closedPromise_reject = reject;\n        });\n    }\n    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseReject(reader, reason);\n    }\n    function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n        defaultReaderClosedPromiseInitialize(reader);\n        defaultReaderClosedPromiseResolve(reader);\n    }\n    function defaultReaderClosedPromiseReject(reader, reason) {\n        if (reader._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(reader._closedPromise);\n        reader._closedPromise_reject(reason);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n    function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n    }\n    function defaultReaderClosedPromiseResolve(reader) {\n        if (reader._closedPromise_resolve === undefined) {\n            return;\n        }\n        reader._closedPromise_resolve(undefined);\n        reader._closedPromise_resolve = undefined;\n        reader._closedPromise_reject = undefined;\n    }\n\n    const AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n    const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n    const CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n    const PullSteps = SymbolPolyfill('[[PullSteps]]');\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n    const NumberIsFinite = Number.isFinite || function (x) {\n        return typeof x === 'number' && isFinite(x);\n    };\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n    const MathTrunc = Math.trunc || function (v) {\n        return v < 0 ? Math.ceil(v) : Math.floor(v);\n    };\n\n    // https://heycam.github.io/webidl/#idl-dictionaries\n    function isDictionary(x) {\n        return typeof x === 'object' || typeof x === 'function';\n    }\n    function assertDictionary(obj, context) {\n        if (obj !== undefined && !isDictionary(obj)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-callback-functions\n    function assertFunction(x, context) {\n        if (typeof x !== 'function') {\n            throw new TypeError(`${context} is not a function.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-object\n    function isObject(x) {\n        return (typeof x === 'object' && x !== null) || typeof x === 'function';\n    }\n    function assertObject(x, context) {\n        if (!isObject(x)) {\n            throw new TypeError(`${context} is not an object.`);\n        }\n    }\n    function assertRequiredArgument(x, position, context) {\n        if (x === undefined) {\n            throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n        }\n    }\n    function assertRequiredField(x, field, context) {\n        if (x === undefined) {\n            throw new TypeError(`${field} is required in '${context}'.`);\n        }\n    }\n    // https://heycam.github.io/webidl/#idl-unrestricted-double\n    function convertUnrestrictedDouble(value) {\n        return Number(value);\n    }\n    function censorNegativeZero(x) {\n        return x === 0 ? 0 : x;\n    }\n    function integerPart(x) {\n        return censorNegativeZero(MathTrunc(x));\n    }\n    // https://heycam.github.io/webidl/#idl-unsigned-long-long\n    function convertUnsignedLongLongWithEnforceRange(value, context) {\n        const lowerBound = 0;\n        const upperBound = Number.MAX_SAFE_INTEGER;\n        let x = Number(value);\n        x = censorNegativeZero(x);\n        if (!NumberIsFinite(x)) {\n            throw new TypeError(`${context} is not a finite number`);\n        }\n        x = integerPart(x);\n        if (x < lowerBound || x > upperBound) {\n            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n        }\n        if (!NumberIsFinite(x) || x === 0) {\n            return 0;\n        }\n        // TODO Use BigInt if supported?\n        // let xBigInt = BigInt(integerPart(x));\n        // xBigInt = BigInt.asUintN(64, xBigInt);\n        // return Number(xBigInt);\n        return x;\n    }\n\n    function assertReadableStream(x, context) {\n        if (!IsReadableStream(x)) {\n            throw new TypeError(`${context} is not a ReadableStream.`);\n        }\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamDefaultReader(stream) {\n        return new ReadableStreamDefaultReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadRequest(stream, readRequest) {\n        stream._reader._readRequests.push(readRequest);\n    }\n    function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readRequest = reader._readRequests.shift();\n        if (done) {\n            readRequest._closeSteps();\n        }\n        else {\n            readRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadRequests(stream) {\n        return stream._reader._readRequests.length;\n    }\n    function ReadableStreamHasDefaultReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamDefaultReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A default reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed,\n         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        /**\n         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        read() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: () => resolvePromise({ value: undefined, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamDefaultReaderRead(this, readRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamDefaultReader(this)) {\n                throw defaultReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            if (this._readRequests.length > 0) {\n                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n            }\n            ReadableStreamReaderGenericRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamDefaultReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamDefaultReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultReader;\n    }\n    function ReadableStreamDefaultReaderRead(reader, readRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            readRequest._closeSteps();\n        }\n        else if (stream._state === 'errored') {\n            readRequest._errorSteps(stream._storedError);\n        }\n        else {\n            stream._readableStreamController[PullSteps](readRequest);\n        }\n    }\n    // Helper functions for the ReadableStreamDefaultReader.\n    function defaultReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n    }\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);\n\n    /// <reference lib=\"es2018.asynciterable\" />\n    class ReadableStreamAsyncIteratorImpl {\n        constructor(reader, preventCancel) {\n            this._ongoingPromise = undefined;\n            this._isFinished = false;\n            this._reader = reader;\n            this._preventCancel = preventCancel;\n        }\n        next() {\n            const nextSteps = () => this._nextSteps();\n            this._ongoingPromise = this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :\n                nextSteps();\n            return this._ongoingPromise;\n        }\n        return(value) {\n            const returnSteps = () => this._returnSteps(value);\n            return this._ongoingPromise ?\n                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :\n                returnSteps();\n        }\n        _nextSteps() {\n            if (this._isFinished) {\n                return Promise.resolve({ value: undefined, done: true });\n            }\n            const reader = this._reader;\n            if (reader._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('iterate'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    this._ongoingPromise = undefined;\n                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n                    // FIXME Is this a bug in the specification, or in the test?\n                    queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n                },\n                _closeSteps: () => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    resolvePromise({ value: undefined, done: true });\n                },\n                _errorSteps: reason => {\n                    this._ongoingPromise = undefined;\n                    this._isFinished = true;\n                    ReadableStreamReaderGenericRelease(reader);\n                    rejectPromise(reason);\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promise;\n        }\n        _returnSteps(value) {\n            if (this._isFinished) {\n                return Promise.resolve({ value, done: true });\n            }\n            this._isFinished = true;\n            const reader = this._reader;\n            if (reader._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('finish iterating'));\n            }\n            if (!this._preventCancel) {\n                const result = ReadableStreamReaderGenericCancel(reader, value);\n                ReadableStreamReaderGenericRelease(reader);\n                return transformPromiseWith(result, () => ({ value, done: true }));\n            }\n            ReadableStreamReaderGenericRelease(reader);\n            return promiseResolvedWith({ value, done: true });\n        }\n    }\n    const ReadableStreamAsyncIteratorPrototype = {\n        next() {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n            }\n            return this._asyncIteratorImpl.next();\n        },\n        return(value) {\n            if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n            }\n            return this._asyncIteratorImpl.return(value);\n        }\n    };\n    if (AsyncIteratorPrototype !== undefined) {\n        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n    }\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n        iterator._asyncIteratorImpl = impl;\n        return iterator;\n    }\n    function IsReadableStreamAsyncIterator(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n            return false;\n        }\n        try {\n            // noinspection SuspiciousTypeOfGuard\n            return x._asyncIteratorImpl instanceof\n                ReadableStreamAsyncIteratorImpl;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamAsyncIteratorBrandCheckException(name) {\n        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n    }\n\n    /// <reference lib=\"es2015.core\" />\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n    const NumberIsNaN = Number.isNaN || function (x) {\n        // eslint-disable-next-line no-self-compare\n        return x !== x;\n    };\n\n    function CreateArrayFromList(elements) {\n        // We use arrays to represent lists, so this is basically a no-op.\n        // Do a slice though just in case we happen to depend on the unique-ness.\n        return elements.slice();\n    }\n    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n    }\n    // Not implemented correctly\n    function TransferArrayBuffer(O) {\n        return O;\n    }\n    // Not implemented correctly\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    function IsDetachedBuffer(O) {\n        return false;\n    }\n    function ArrayBufferSlice(buffer, begin, end) {\n        // ArrayBuffer.prototype.slice is not available on IE10\n        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n        if (buffer.slice) {\n            return buffer.slice(begin, end);\n        }\n        const length = end - begin;\n        const slice = new ArrayBuffer(length);\n        CopyDataBlockBytes(slice, 0, buffer, begin, length);\n        return slice;\n    }\n\n    function IsNonNegativeNumber(v) {\n        if (typeof v !== 'number') {\n            return false;\n        }\n        if (NumberIsNaN(v)) {\n            return false;\n        }\n        if (v < 0) {\n            return false;\n        }\n        return true;\n    }\n    function CloneAsUint8Array(O) {\n        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n        return new Uint8Array(buffer);\n    }\n\n    function DequeueValue(container) {\n        const pair = container._queue.shift();\n        container._queueTotalSize -= pair.size;\n        if (container._queueTotalSize < 0) {\n            container._queueTotalSize = 0;\n        }\n        return pair.value;\n    }\n    function EnqueueValueWithSize(container, value, size) {\n        if (!IsNonNegativeNumber(size) || size === Infinity) {\n            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n        }\n        container._queue.push({ value, size });\n        container._queueTotalSize += size;\n    }\n    function PeekQueueValue(container) {\n        const pair = container._queue.peek();\n        return pair.value;\n    }\n    function ResetQueue(container) {\n        container._queue = new SimpleQueue();\n        container._queueTotalSize = 0;\n    }\n\n    /**\n     * A pull-into request in a {@link ReadableByteStreamController}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBRequest {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n         */\n        get view() {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('view');\n            }\n            return this._view;\n        }\n        respond(bytesWritten) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respond');\n            }\n            assertRequiredArgument(bytesWritten, 1, 'respond');\n            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(this._view.buffer)) ;\n            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n        }\n        respondWithNewView(view) {\n            if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException('respondWithNewView');\n            }\n            assertRequiredArgument(view, 1, 'respondWithNewView');\n            if (!ArrayBuffer.isView(view)) {\n                throw new TypeError('You can only respond with array buffer views');\n            }\n            if (this._associatedReadableByteStreamController === undefined) {\n                throw new TypeError('This BYOB request has been invalidated');\n            }\n            if (IsDetachedBuffer(view.buffer)) ;\n            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n        respond: { enumerable: true },\n        respondWithNewView: { enumerable: true },\n        view: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamBYOBRequest',\n            configurable: true\n        });\n    }\n    /**\n     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableByteStreamController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the current BYOB pull request, or `null` if there isn't one.\n         */\n        get byobRequest() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('byobRequest');\n            }\n            return ReadableByteStreamControllerGetBYOBRequest(this);\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('desiredSize');\n            }\n            return ReadableByteStreamControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('close');\n            }\n            if (this._closeRequested) {\n                throw new TypeError('The stream has already been closed; do not close it again!');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n            }\n            ReadableByteStreamControllerClose(this);\n        }\n        enqueue(chunk) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('enqueue');\n            }\n            assertRequiredArgument(chunk, 1, 'enqueue');\n            if (!ArrayBuffer.isView(chunk)) {\n                throw new TypeError('chunk must be an array buffer view');\n            }\n            if (chunk.byteLength === 0) {\n                throw new TypeError('chunk must have non-zero byteLength');\n            }\n            if (chunk.buffer.byteLength === 0) {\n                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n            }\n            if (this._closeRequested) {\n                throw new TypeError('stream is closed or draining');\n            }\n            const state = this._controlledReadableByteStream._state;\n            if (state !== 'readable') {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n            }\n            ReadableByteStreamControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException('error');\n            }\n            ReadableByteStreamControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ReadableByteStreamControllerClearPendingPullIntos(this);\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableByteStreamControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableByteStream;\n            if (this._queueTotalSize > 0) {\n                const entry = this._queue.shift();\n                this._queueTotalSize -= entry.byteLength;\n                ReadableByteStreamControllerHandleQueueDrain(this);\n                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                readRequest._chunkSteps(view);\n                return;\n            }\n            const autoAllocateChunkSize = this._autoAllocateChunkSize;\n            if (autoAllocateChunkSize !== undefined) {\n                let buffer;\n                try {\n                    buffer = new ArrayBuffer(autoAllocateChunkSize);\n                }\n                catch (bufferE) {\n                    readRequest._errorSteps(bufferE);\n                    return;\n                }\n                const pullIntoDescriptor = {\n                    buffer,\n                    bufferByteLength: autoAllocateChunkSize,\n                    byteOffset: 0,\n                    byteLength: autoAllocateChunkSize,\n                    bytesFilled: 0,\n                    elementSize: 1,\n                    viewConstructor: Uint8Array,\n                    readerType: 'default'\n                };\n                this._pendingPullIntos.push(pullIntoDescriptor);\n            }\n            ReadableStreamAddReadRequest(stream, readRequest);\n            ReadableByteStreamControllerCallPullIfNeeded(this);\n        }\n    }\n    Object.defineProperties(ReadableByteStreamController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        byobRequest: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableByteStreamController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableByteStreamController.\n    function IsReadableByteStreamController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n            return false;\n        }\n        return x instanceof ReadableByteStreamController;\n    }\n    function IsReadableStreamBYOBRequest(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBRequest;\n    }\n    function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        // TODO: Test controller argument\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n        }, e => {\n            ReadableByteStreamControllerError(controller, e);\n        });\n    }\n    function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        controller._pendingPullIntos = new SimpleQueue();\n    }\n    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n        let done = false;\n        if (stream._state === 'closed') {\n            done = true;\n        }\n        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        if (pullIntoDescriptor.readerType === 'default') {\n            ReadableStreamFulfillReadRequest(stream, filledView, done);\n        }\n        else {\n            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n        }\n    }\n    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n        const bytesFilled = pullIntoDescriptor.bytesFilled;\n        const elementSize = pullIntoDescriptor.elementSize;\n        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n    }\n    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n        controller._queue.push({ buffer, byteOffset, byteLength });\n        controller._queueTotalSize += byteLength;\n    }\n    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n        const elementSize = pullIntoDescriptor.elementSize;\n        const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n        const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n        let totalBytesToCopyRemaining = maxBytesToCopy;\n        let ready = false;\n        if (maxAlignedBytes > currentAlignedBytes) {\n            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n            ready = true;\n        }\n        const queue = controller._queue;\n        while (totalBytesToCopyRemaining > 0) {\n            const headOfQueue = queue.peek();\n            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n            if (headOfQueue.byteLength === bytesToCopy) {\n                queue.shift();\n            }\n            else {\n                headOfQueue.byteOffset += bytesToCopy;\n                headOfQueue.byteLength -= bytesToCopy;\n            }\n            controller._queueTotalSize -= bytesToCopy;\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n            totalBytesToCopyRemaining -= bytesToCopy;\n        }\n        return ready;\n    }\n    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n        pullIntoDescriptor.bytesFilled += size;\n    }\n    function ReadableByteStreamControllerHandleQueueDrain(controller) {\n        if (controller._queueTotalSize === 0 && controller._closeRequested) {\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamClose(controller._controlledReadableByteStream);\n        }\n        else {\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }\n    }\n    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n        if (controller._byobRequest === null) {\n            return;\n        }\n        controller._byobRequest._associatedReadableByteStreamController = undefined;\n        controller._byobRequest._view = null;\n        controller._byobRequest = null;\n    }\n    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n        while (controller._pendingPullIntos.length > 0) {\n            if (controller._queueTotalSize === 0) {\n                return;\n            }\n            const pullIntoDescriptor = controller._pendingPullIntos.peek();\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n        const stream = controller._controlledReadableByteStream;\n        let elementSize = 1;\n        if (view.constructor !== DataView) {\n            elementSize = view.constructor.BYTES_PER_ELEMENT;\n        }\n        const ctor = view.constructor;\n        // try {\n        const buffer = TransferArrayBuffer(view.buffer);\n        // } catch (e) {\n        //   readIntoRequest._errorSteps(e);\n        //   return;\n        // }\n        const pullIntoDescriptor = {\n            buffer,\n            bufferByteLength: buffer.byteLength,\n            byteOffset: view.byteOffset,\n            byteLength: view.byteLength,\n            bytesFilled: 0,\n            elementSize,\n            viewConstructor: ctor,\n            readerType: 'byob'\n        };\n        if (controller._pendingPullIntos.length > 0) {\n            controller._pendingPullIntos.push(pullIntoDescriptor);\n            // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n            // - No change happens on desiredSize\n            // - The source has already been notified of that there's at least 1 pending read(view)\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n            return;\n        }\n        if (stream._state === 'closed') {\n            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n            readIntoRequest._closeSteps(emptyView);\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                ReadableByteStreamControllerHandleQueueDrain(controller);\n                readIntoRequest._chunkSteps(filledView);\n                return;\n            }\n            if (controller._closeRequested) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                readIntoRequest._errorSteps(e);\n                return;\n            }\n        }\n        controller._pendingPullIntos.push(pullIntoDescriptor);\n        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n        const stream = controller._controlledReadableByteStream;\n        if (ReadableStreamHasBYOBReader(stream)) {\n            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n            }\n        }\n    }\n    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n            return;\n        }\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n        if (remainderSize > 0) {\n            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n        }\n        pullIntoDescriptor.bytesFilled -= remainderSize;\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    }\n    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            ReadableByteStreamControllerRespondInClosedState(controller);\n        }\n        else {\n            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n        const descriptor = controller._pendingPullIntos.shift();\n        return descriptor;\n    }\n    function ReadableByteStreamControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return false;\n        }\n        if (controller._closeRequested) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableByteStreamControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n    }\n    // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n    function ReadableByteStreamControllerClose(controller) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        if (controller._queueTotalSize > 0) {\n            controller._closeRequested = true;\n            return;\n        }\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (firstPendingPullInto.bytesFilled > 0) {\n                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n                ReadableByteStreamControllerError(controller, e);\n                throw e;\n            }\n        }\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamClose(stream);\n    }\n    function ReadableByteStreamControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledReadableByteStream;\n        if (controller._closeRequested || stream._state !== 'readable') {\n            return;\n        }\n        const buffer = chunk.buffer;\n        const byteOffset = chunk.byteOffset;\n        const byteLength = chunk.byteLength;\n        const transferredBuffer = TransferArrayBuffer(buffer);\n        if (controller._pendingPullIntos.length > 0) {\n            const firstPendingPullInto = controller._pendingPullIntos.peek();\n            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n        }\n        ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n        if (ReadableStreamHasDefaultReader(stream)) {\n            if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            }\n            else {\n                if (controller._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerShiftPendingPullInto(controller);\n                }\n                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n            }\n        }\n        else if (ReadableStreamHasBYOBReader(stream)) {\n            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n        }\n        else {\n            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n        }\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n    function ReadableByteStreamControllerError(controller, e) {\n        const stream = controller._controlledReadableByteStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ReadableByteStreamControllerClearPendingPullIntos(controller);\n        ResetQueue(controller);\n        ReadableByteStreamControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableByteStreamControllerGetBYOBRequest(controller) {\n        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n            controller._byobRequest = byobRequest;\n        }\n        return controller._byobRequest;\n    }\n    function ReadableByteStreamControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (bytesWritten !== 0) {\n                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n            }\n        }\n        else {\n            if (bytesWritten === 0) {\n                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n            }\n            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                throw new RangeError('bytesWritten out of range');\n            }\n        }\n        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n    }\n    function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n        const firstDescriptor = controller._pendingPullIntos.peek();\n        const state = controller._controlledReadableByteStream._state;\n        if (state === 'closed') {\n            if (view.byteLength !== 0) {\n                throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n            }\n        }\n        else {\n            if (view.byteLength === 0) {\n                throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n            }\n        }\n        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n            throw new RangeError('The region specified by view does not match byobRequest');\n        }\n        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n            throw new RangeError('The buffer of view has different capacity than byobRequest');\n        }\n        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n            throw new RangeError('The region specified by view is larger than byobRequest');\n        }\n        const viewByteLength = view.byteLength;\n        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n    }\n    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n        controller._controlledReadableByteStream = stream;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._byobRequest = null;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._closeRequested = false;\n        controller._started = false;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        controller._autoAllocateChunkSize = autoAllocateChunkSize;\n        controller._pendingPullIntos = new SimpleQueue();\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n        }, r => {\n            ReadableByteStreamControllerError(controller, r);\n        });\n    }\n    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        let startAlgorithm = () => undefined;\n        let pullAlgorithm = () => promiseResolvedWith(undefined);\n        let cancelAlgorithm = () => promiseResolvedWith(undefined);\n        if (underlyingByteSource.start !== undefined) {\n            startAlgorithm = () => underlyingByteSource.start(controller);\n        }\n        if (underlyingByteSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingByteSource.pull(controller);\n        }\n        if (underlyingByteSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);\n        }\n        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n        if (autoAllocateChunkSize === 0) {\n            throw new TypeError('autoAllocateChunkSize must be greater than 0');\n        }\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n    }\n    function SetUpReadableStreamBYOBRequest(request, controller, view) {\n        request._associatedReadableByteStreamController = controller;\n        request._view = view;\n    }\n    // Helper functions for the ReadableStreamBYOBRequest.\n    function byobRequestBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n    }\n    // Helper functions for the ReadableByteStreamController.\n    function byteStreamControllerBrandCheckException(name) {\n        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n    }\n\n    // Abstract operations for the ReadableStream.\n    function AcquireReadableStreamBYOBReader(stream) {\n        return new ReadableStreamBYOBReader(stream);\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n        stream._reader._readIntoRequests.push(readIntoRequest);\n    }\n    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n        const reader = stream._reader;\n        const readIntoRequest = reader._readIntoRequests.shift();\n        if (done) {\n            readIntoRequest._closeSteps(chunk);\n        }\n        else {\n            readIntoRequest._chunkSteps(chunk);\n        }\n    }\n    function ReadableStreamGetNumReadIntoRequests(stream) {\n        return stream._reader._readIntoRequests.length;\n    }\n    function ReadableStreamHasBYOBReader(stream) {\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return false;\n        }\n        if (!IsReadableStreamBYOBReader(reader)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * A BYOB reader vended by a {@link ReadableStream}.\n     *\n     * @public\n     */\n    class ReadableStreamBYOBReader {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n            assertReadableStream(stream, 'First parameter');\n            if (IsReadableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n            }\n            if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +\n                    'source');\n            }\n            ReadableStreamReaderGenericInitialize(this, stream);\n            this._readIntoRequests = new SimpleQueue();\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the reader's lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n            }\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('cancel'));\n            }\n            return ReadableStreamReaderGenericCancel(this, reason);\n        }\n        /**\n         * Attempts to reads bytes into view, and returns a promise resolved with the result.\n         *\n         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n         */\n        read(view) {\n            if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException('read'));\n            }\n            if (!ArrayBuffer.isView(view)) {\n                return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n            }\n            if (view.byteLength === 0) {\n                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n            }\n            if (view.buffer.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n            }\n            if (IsDetachedBuffer(view.buffer)) ;\n            if (this._ownerReadableStream === undefined) {\n                return promiseRejectedWith(readerLockException('read from'));\n            }\n            let resolvePromise;\n            let rejectPromise;\n            const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n            });\n            const readIntoRequest = {\n                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),\n                _errorSteps: e => rejectPromise(e)\n            };\n            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n            return promise;\n        }\n        /**\n         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n         * from now on; otherwise, the reader will appear closed.\n         *\n         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n         * do so will throw a `TypeError` and leave the reader locked to the stream.\n         */\n        releaseLock() {\n            if (!IsReadableStreamBYOBReader(this)) {\n                throw byobReaderBrandCheckException('releaseLock');\n            }\n            if (this._ownerReadableStream === undefined) {\n                return;\n            }\n            if (this._readIntoRequests.length > 0) {\n                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n            }\n            ReadableStreamReaderGenericRelease(this);\n        }\n    }\n    Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n        cancel: { enumerable: true },\n        read: { enumerable: true },\n        releaseLock: { enumerable: true },\n        closed: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamBYOBReader',\n            configurable: true\n        });\n    }\n    // Abstract operations for the readers.\n    function IsReadableStreamBYOBReader(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n            return false;\n        }\n        return x instanceof ReadableStreamBYOBReader;\n    }\n    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n        const stream = reader._ownerReadableStream;\n        stream._disturbed = true;\n        if (stream._state === 'errored') {\n            readIntoRequest._errorSteps(stream._storedError);\n        }\n        else {\n            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n        }\n    }\n    // Helper functions for the ReadableStreamBYOBReader.\n    function byobReaderBrandCheckException(name) {\n        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n    }\n\n    function ExtractHighWaterMark(strategy, defaultHWM) {\n        const { highWaterMark } = strategy;\n        if (highWaterMark === undefined) {\n            return defaultHWM;\n        }\n        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n            throw new RangeError('Invalid highWaterMark');\n        }\n        return highWaterMark;\n    }\n    function ExtractSizeAlgorithm(strategy) {\n        const { size } = strategy;\n        if (!size) {\n            return () => 1;\n        }\n        return size;\n    }\n\n    function convertQueuingStrategy(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        const size = init === null || init === void 0 ? void 0 : init.size;\n        return {\n            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n        };\n    }\n    function convertQueuingStrategySize(fn, context) {\n        assertFunction(fn, context);\n        return chunk => convertUnrestrictedDouble(fn(chunk));\n    }\n\n    function convertUnderlyingSink(original, context) {\n        assertDictionary(original, context);\n        const abort = original === null || original === void 0 ? void 0 : original.abort;\n        const close = original === null || original === void 0 ? void 0 : original.close;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        const write = original === null || original === void 0 ? void 0 : original.write;\n        return {\n            abort: abort === undefined ?\n                undefined :\n                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n            close: close === undefined ?\n                undefined :\n                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n            write: write === undefined ?\n                undefined :\n                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n            type\n        };\n    }\n    function convertUnderlyingSinkAbortCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSinkCloseCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return () => promiseCall(fn, original, []);\n    }\n    function convertUnderlyingSinkStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSinkWriteCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n\n    function assertWritableStream(x, context) {\n        if (!IsWritableStream(x)) {\n            throw new TypeError(`${context} is not a WritableStream.`);\n        }\n    }\n\n    function isAbortSignal(value) {\n        if (typeof value !== 'object' || value === null) {\n            return false;\n        }\n        try {\n            return typeof value.aborted === 'boolean';\n        }\n        catch (_a) {\n            // AbortSignal.prototype.aborted throws if its brand check fails\n            return false;\n        }\n    }\n    const supportsAbortController = typeof AbortController === 'function';\n    /**\n     * Construct a new AbortController, if supported by the platform.\n     *\n     * @internal\n     */\n    function createAbortController() {\n        if (supportsAbortController) {\n            return new AbortController();\n        }\n        return undefined;\n    }\n\n    /**\n     * A writable stream represents a destination for data, into which you can write.\n     *\n     * @public\n     */\n    class WritableStream {\n        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n            if (rawUnderlyingSink === undefined) {\n                rawUnderlyingSink = null;\n            }\n            else {\n                assertObject(rawUnderlyingSink, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n            InitializeWritableStream(this);\n            const type = underlyingSink.type;\n            if (type !== undefined) {\n                throw new RangeError('Invalid type is specified');\n            }\n            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n            const highWaterMark = ExtractHighWaterMark(strategy, 1);\n            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n        }\n        /**\n         * Returns whether or not the writable stream is locked to a writer.\n         */\n        get locked() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('locked');\n            }\n            return IsWritableStreamLocked(this);\n        }\n        /**\n         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n         * mechanism of the underlying sink.\n         *\n         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n         * the stream) if the stream is currently locked.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('abort'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n            }\n            return WritableStreamAbort(this, reason);\n        }\n        /**\n         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n         * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n         *\n         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n         */\n        close() {\n            if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2('close'));\n            }\n            if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(this)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamClose(this);\n        }\n        /**\n         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n         * is locked, no other writer can be acquired until this one is released.\n         *\n         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n         * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n         */\n        getWriter() {\n            if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2('getWriter');\n            }\n            return AcquireWritableStreamDefaultWriter(this);\n        }\n    }\n    Object.defineProperties(WritableStream.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        getWriter: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStream',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStream.\n    function AcquireWritableStreamDefaultWriter(stream) {\n        return new WritableStreamDefaultWriter(stream);\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(WritableStream.prototype);\n        InitializeWritableStream(stream);\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    function InitializeWritableStream(stream) {\n        stream._state = 'writable';\n        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n        // 'erroring' or 'errored'. May be set to an undefined value.\n        stream._storedError = undefined;\n        stream._writer = undefined;\n        // Initialize to undefined first because the constructor of the controller checks this\n        // variable to validate the caller.\n        stream._writableStreamController = undefined;\n        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n        // producer without waiting for the queued writes to finish.\n        stream._writeRequests = new SimpleQueue();\n        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n        stream._inFlightWriteRequest = undefined;\n        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n        // has been detached.\n        stream._closeRequest = undefined;\n        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n        stream._inFlightCloseRequest = undefined;\n        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n        stream._pendingAbortRequest = undefined;\n        // The backpressure signal set by the controller.\n        stream._backpressure = false;\n    }\n    function IsWritableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n            return false;\n        }\n        return x instanceof WritableStream;\n    }\n    function IsWritableStreamLocked(stream) {\n        if (stream._writer === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamAbort(stream, reason) {\n        var _a;\n        if (stream._state === 'closed' || stream._state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        stream._writableStreamController._abortReason = reason;\n        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n        // but it doesn't know that signaling abort runs author code that might have changed the state.\n        // Widen the type again by casting to WritableStreamState.\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._pendingAbortRequest !== undefined) {\n            return stream._pendingAbortRequest._promise;\n        }\n        let wasAlreadyErroring = false;\n        if (state === 'erroring') {\n            wasAlreadyErroring = true;\n            // reason will not be used, so don't keep a reference to it.\n            reason = undefined;\n        }\n        const promise = newPromise((resolve, reject) => {\n            stream._pendingAbortRequest = {\n                _promise: undefined,\n                _resolve: resolve,\n                _reject: reject,\n                _reason: reason,\n                _wasAlreadyErroring: wasAlreadyErroring\n            };\n        });\n        stream._pendingAbortRequest._promise = promise;\n        if (!wasAlreadyErroring) {\n            WritableStreamStartErroring(stream, reason);\n        }\n        return promise;\n    }\n    function WritableStreamClose(stream) {\n        const state = stream._state;\n        if (state === 'closed' || state === 'errored') {\n            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n        }\n        const promise = newPromise((resolve, reject) => {\n            const closeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._closeRequest = closeRequest;\n        });\n        const writer = stream._writer;\n        if (writer !== undefined && stream._backpressure && state === 'writable') {\n            defaultWriterReadyPromiseResolve(writer);\n        }\n        WritableStreamDefaultControllerClose(stream._writableStreamController);\n        return promise;\n    }\n    // WritableStream API exposed for controllers.\n    function WritableStreamAddWriteRequest(stream) {\n        const promise = newPromise((resolve, reject) => {\n            const writeRequest = {\n                _resolve: resolve,\n                _reject: reject\n            };\n            stream._writeRequests.push(writeRequest);\n        });\n        return promise;\n    }\n    function WritableStreamDealWithRejection(stream, error) {\n        const state = stream._state;\n        if (state === 'writable') {\n            WritableStreamStartErroring(stream, error);\n            return;\n        }\n        WritableStreamFinishErroring(stream);\n    }\n    function WritableStreamStartErroring(stream, reason) {\n        const controller = stream._writableStreamController;\n        stream._state = 'erroring';\n        stream._storedError = reason;\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n        }\n        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n            WritableStreamFinishErroring(stream);\n        }\n    }\n    function WritableStreamFinishErroring(stream) {\n        stream._state = 'errored';\n        stream._writableStreamController[ErrorSteps]();\n        const storedError = stream._storedError;\n        stream._writeRequests.forEach(writeRequest => {\n            writeRequest._reject(storedError);\n        });\n        stream._writeRequests = new SimpleQueue();\n        if (stream._pendingAbortRequest === undefined) {\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const abortRequest = stream._pendingAbortRequest;\n        stream._pendingAbortRequest = undefined;\n        if (abortRequest._wasAlreadyErroring) {\n            abortRequest._reject(storedError);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            return;\n        }\n        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n        uponPromise(promise, () => {\n            abortRequest._resolve();\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n        }, (reason) => {\n            abortRequest._reject(reason);\n            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n        });\n    }\n    function WritableStreamFinishInFlightWrite(stream) {\n        stream._inFlightWriteRequest._resolve(undefined);\n        stream._inFlightWriteRequest = undefined;\n    }\n    function WritableStreamFinishInFlightWriteWithError(stream, error) {\n        stream._inFlightWriteRequest._reject(error);\n        stream._inFlightWriteRequest = undefined;\n        WritableStreamDealWithRejection(stream, error);\n    }\n    function WritableStreamFinishInFlightClose(stream) {\n        stream._inFlightCloseRequest._resolve(undefined);\n        stream._inFlightCloseRequest = undefined;\n        const state = stream._state;\n        if (state === 'erroring') {\n            // The error was too late to do anything, so it is ignored.\n            stream._storedError = undefined;\n            if (stream._pendingAbortRequest !== undefined) {\n                stream._pendingAbortRequest._resolve();\n                stream._pendingAbortRequest = undefined;\n            }\n        }\n        stream._state = 'closed';\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseResolve(writer);\n        }\n    }\n    function WritableStreamFinishInFlightCloseWithError(stream, error) {\n        stream._inFlightCloseRequest._reject(error);\n        stream._inFlightCloseRequest = undefined;\n        // Never execute sink abort() after sink close().\n        if (stream._pendingAbortRequest !== undefined) {\n            stream._pendingAbortRequest._reject(error);\n            stream._pendingAbortRequest = undefined;\n        }\n        WritableStreamDealWithRejection(stream, error);\n    }\n    // TODO(ricea): Fix alphabetical order.\n    function WritableStreamCloseQueuedOrInFlight(stream) {\n        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamHasOperationMarkedInFlight(stream) {\n        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n            return false;\n        }\n        return true;\n    }\n    function WritableStreamMarkCloseRequestInFlight(stream) {\n        stream._inFlightCloseRequest = stream._closeRequest;\n        stream._closeRequest = undefined;\n    }\n    function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n        stream._inFlightWriteRequest = stream._writeRequests.shift();\n    }\n    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n        if (stream._closeRequest !== undefined) {\n            stream._closeRequest._reject(stream._storedError);\n            stream._closeRequest = undefined;\n        }\n        const writer = stream._writer;\n        if (writer !== undefined) {\n            defaultWriterClosedPromiseReject(writer, stream._storedError);\n        }\n    }\n    function WritableStreamUpdateBackpressure(stream, backpressure) {\n        const writer = stream._writer;\n        if (writer !== undefined && backpressure !== stream._backpressure) {\n            if (backpressure) {\n                defaultWriterReadyPromiseReset(writer);\n            }\n            else {\n                defaultWriterReadyPromiseResolve(writer);\n            }\n        }\n        stream._backpressure = backpressure;\n    }\n    /**\n     * A default writer vended by a {@link WritableStream}.\n     *\n     * @public\n     */\n    class WritableStreamDefaultWriter {\n        constructor(stream) {\n            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n            assertWritableStream(stream, 'First parameter');\n            if (IsWritableStreamLocked(stream)) {\n                throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n            }\n            this._ownerWritableStream = stream;\n            stream._writer = this;\n            const state = stream._state;\n            if (state === 'writable') {\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                    defaultWriterReadyPromiseInitialize(this);\n                }\n                else {\n                    defaultWriterReadyPromiseInitializeAsResolved(this);\n                }\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'erroring') {\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                defaultWriterClosedPromiseInitialize(this);\n            }\n            else if (state === 'closed') {\n                defaultWriterReadyPromiseInitializeAsResolved(this);\n                defaultWriterClosedPromiseInitializeAsResolved(this);\n            }\n            else {\n                const storedError = stream._storedError;\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n            }\n        }\n        /**\n         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n         * the writer’s lock is released before the stream finishes closing.\n         */\n        get closed() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n            }\n            return this._closedPromise;\n        }\n        /**\n         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n         * A producer can use this information to determine the right amount of data to write.\n         *\n         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n         * the writer’s lock is released.\n         */\n        get desiredSize() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('desiredSize');\n            }\n            if (this._ownerWritableStream === undefined) {\n                throw defaultWriterLockException('desiredSize');\n            }\n            return WritableStreamDefaultWriterGetDesiredSize(this);\n        }\n        /**\n         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n         * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n         *\n         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n         * rejected.\n         */\n        get ready() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n            }\n            return this._readyPromise;\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n         */\n        abort(reason = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('abort'));\n            }\n            return WritableStreamDefaultWriterAbort(this, reason);\n        }\n        /**\n         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n         */\n        close() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('close'));\n            }\n            if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n            }\n            return WritableStreamDefaultWriterClose(this);\n        }\n        /**\n         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n         * now on; otherwise, the writer will appear closed.\n         *\n         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n         * other producers from writing in an interleaved manner.\n         */\n        releaseLock() {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException('releaseLock');\n            }\n            const stream = this._ownerWritableStream;\n            if (stream === undefined) {\n                return;\n            }\n            WritableStreamDefaultWriterRelease(this);\n        }\n        write(chunk = undefined) {\n            if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n            }\n            if (this._ownerWritableStream === undefined) {\n                return promiseRejectedWith(defaultWriterLockException('write to'));\n            }\n            return WritableStreamDefaultWriterWrite(this, chunk);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n        abort: { enumerable: true },\n        close: { enumerable: true },\n        releaseLock: { enumerable: true },\n        write: { enumerable: true },\n        closed: { enumerable: true },\n        desiredSize: { enumerable: true },\n        ready: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStreamDefaultWriter',\n            configurable: true\n        });\n    }\n    // Abstract operations for the WritableStreamDefaultWriter.\n    function IsWritableStreamDefaultWriter(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultWriter;\n    }\n    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n    function WritableStreamDefaultWriterAbort(writer, reason) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamAbort(stream, reason);\n    }\n    function WritableStreamDefaultWriterClose(writer) {\n        const stream = writer._ownerWritableStream;\n        return WritableStreamClose(stream);\n    }\n    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        return WritableStreamDefaultWriterClose(writer);\n    }\n    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n        if (writer._closedPromiseState === 'pending') {\n            defaultWriterClosedPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterClosedPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n        if (writer._readyPromiseState === 'pending') {\n            defaultWriterReadyPromiseReject(writer, error);\n        }\n        else {\n            defaultWriterReadyPromiseResetToRejected(writer, error);\n        }\n    }\n    function WritableStreamDefaultWriterGetDesiredSize(writer) {\n        const stream = writer._ownerWritableStream;\n        const state = stream._state;\n        if (state === 'errored' || state === 'erroring') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n    }\n    function WritableStreamDefaultWriterRelease(writer) {\n        const stream = writer._ownerWritableStream;\n        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n        // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n        // rejected until afterwards. This means that simply testing state will not work.\n        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n        stream._writer = undefined;\n        writer._ownerWritableStream = undefined;\n    }\n    function WritableStreamDefaultWriterWrite(writer, chunk) {\n        const stream = writer._ownerWritableStream;\n        const controller = stream._writableStreamController;\n        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n        if (stream !== writer._ownerWritableStream) {\n            return promiseRejectedWith(defaultWriterLockException('write to'));\n        }\n        const state = stream._state;\n        if (state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n        }\n        if (state === 'erroring') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        const promise = WritableStreamAddWriteRequest(stream);\n        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n        return promise;\n    }\n    const closeSentinel = {};\n    /**\n     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class WritableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n         *\n         * @deprecated\n         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.\n         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.\n         */\n        get abortReason() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('abortReason');\n            }\n            return this._abortReason;\n        }\n        /**\n         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n         */\n        get signal() {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('signal');\n            }\n            if (this._abortController === undefined) {\n                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n            }\n            return this._abortController.signal;\n        }\n        /**\n         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n         *\n         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n         * normal lifecycle of interactions with the underlying sink.\n         */\n        error(e = undefined) {\n            if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2('error');\n            }\n            const state = this._controlledWritableStream._state;\n            if (state !== 'writable') {\n                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n                // just treat it as a no-op.\n                return;\n            }\n            WritableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [AbortSteps](reason) {\n            const result = this._abortAlgorithm(reason);\n            WritableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [ErrorSteps]() {\n            ResetQueue(this);\n        }\n    }\n    Object.defineProperties(WritableStreamDefaultController.prototype, {\n        abortReason: { enumerable: true },\n        signal: { enumerable: true },\n        error: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'WritableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations implementing interface required by the WritableStream.\n    function IsWritableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n            return false;\n        }\n        return x instanceof WritableStreamDefaultController;\n    }\n    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledWritableStream = stream;\n        stream._writableStreamController = controller;\n        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._abortReason = undefined;\n        controller._abortController = createAbortController();\n        controller._started = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._writeAlgorithm = writeAlgorithm;\n        controller._closeAlgorithm = closeAlgorithm;\n        controller._abortAlgorithm = abortAlgorithm;\n        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n        const startResult = startAlgorithm();\n        const startPromise = promiseResolvedWith(startResult);\n        uponPromise(startPromise, () => {\n            controller._started = true;\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n        }, r => {\n            controller._started = true;\n            WritableStreamDealWithRejection(stream, r);\n        });\n    }\n    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(WritableStreamDefaultController.prototype);\n        let startAlgorithm = () => undefined;\n        let writeAlgorithm = () => promiseResolvedWith(undefined);\n        let closeAlgorithm = () => promiseResolvedWith(undefined);\n        let abortAlgorithm = () => promiseResolvedWith(undefined);\n        if (underlyingSink.start !== undefined) {\n            startAlgorithm = () => underlyingSink.start(controller);\n        }\n        if (underlyingSink.write !== undefined) {\n            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);\n        }\n        if (underlyingSink.close !== undefined) {\n            closeAlgorithm = () => underlyingSink.close();\n        }\n        if (underlyingSink.abort !== undefined) {\n            abortAlgorithm = reason => underlyingSink.abort(reason);\n        }\n        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n    function WritableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._writeAlgorithm = undefined;\n        controller._closeAlgorithm = undefined;\n        controller._abortAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    function WritableStreamDefaultControllerClose(controller) {\n        EnqueueValueWithSize(controller, closeSentinel, 0);\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n        try {\n            return controller._strategySizeAlgorithm(chunk);\n        }\n        catch (chunkSizeE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n            return 1;\n        }\n    }\n    function WritableStreamDefaultControllerGetDesiredSize(controller) {\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n        try {\n            EnqueueValueWithSize(controller, chunk, chunkSize);\n        }\n        catch (enqueueE) {\n            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n            return;\n        }\n        const stream = controller._controlledWritableStream;\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n            WritableStreamUpdateBackpressure(stream, backpressure);\n        }\n        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }\n    // Abstract operations for the WritableStreamDefaultController.\n    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n        const stream = controller._controlledWritableStream;\n        if (!controller._started) {\n            return;\n        }\n        if (stream._inFlightWriteRequest !== undefined) {\n            return;\n        }\n        const state = stream._state;\n        if (state === 'erroring') {\n            WritableStreamFinishErroring(stream);\n            return;\n        }\n        if (controller._queue.length === 0) {\n            return;\n        }\n        const value = PeekQueueValue(controller);\n        if (value === closeSentinel) {\n            WritableStreamDefaultControllerProcessClose(controller);\n        }\n        else {\n            WritableStreamDefaultControllerProcessWrite(controller, value);\n        }\n    }\n    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n        if (controller._controlledWritableStream._state === 'writable') {\n            WritableStreamDefaultControllerError(controller, error);\n        }\n    }\n    function WritableStreamDefaultControllerProcessClose(controller) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkCloseRequestInFlight(stream);\n        DequeueValue(controller);\n        const sinkClosePromise = controller._closeAlgorithm();\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        uponPromise(sinkClosePromise, () => {\n            WritableStreamFinishInFlightClose(stream);\n        }, reason => {\n            WritableStreamFinishInFlightCloseWithError(stream, reason);\n        });\n    }\n    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamMarkFirstWriteRequestInFlight(stream);\n        const sinkWritePromise = controller._writeAlgorithm(chunk);\n        uponPromise(sinkWritePromise, () => {\n            WritableStreamFinishInFlightWrite(stream);\n            const state = stream._state;\n            DequeueValue(controller);\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n            }\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n        }, reason => {\n            if (stream._state === 'writable') {\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n            }\n            WritableStreamFinishInFlightWriteWithError(stream, reason);\n        });\n    }\n    function WritableStreamDefaultControllerGetBackpressure(controller) {\n        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n        return desiredSize <= 0;\n    }\n    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n    function WritableStreamDefaultControllerError(controller, error) {\n        const stream = controller._controlledWritableStream;\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n        WritableStreamStartErroring(stream, error);\n    }\n    // Helper functions for the WritableStream.\n    function streamBrandCheckException$2(name) {\n        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n    }\n    // Helper functions for the WritableStreamDefaultController.\n    function defaultControllerBrandCheckException$2(name) {\n        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n    }\n    // Helper functions for the WritableStreamDefaultWriter.\n    function defaultWriterBrandCheckException(name) {\n        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n    }\n    function defaultWriterLockException(name) {\n        return new TypeError('Cannot ' + name + ' a stream using a released writer');\n    }\n    function defaultWriterClosedPromiseInitialize(writer) {\n        writer._closedPromise = newPromise((resolve, reject) => {\n            writer._closedPromise_resolve = resolve;\n            writer._closedPromise_reject = reject;\n            writer._closedPromiseState = 'pending';\n        });\n    }\n    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseReject(writer, reason);\n    }\n    function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n        defaultWriterClosedPromiseInitialize(writer);\n        defaultWriterClosedPromiseResolve(writer);\n    }\n    function defaultWriterClosedPromiseReject(writer, reason) {\n        if (writer._closedPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._closedPromise);\n        writer._closedPromise_reject(reason);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'rejected';\n    }\n    function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterClosedPromiseResolve(writer) {\n        if (writer._closedPromise_resolve === undefined) {\n            return;\n        }\n        writer._closedPromise_resolve(undefined);\n        writer._closedPromise_resolve = undefined;\n        writer._closedPromise_reject = undefined;\n        writer._closedPromiseState = 'resolved';\n    }\n    function defaultWriterReadyPromiseInitialize(writer) {\n        writer._readyPromise = newPromise((resolve, reject) => {\n            writer._readyPromise_resolve = resolve;\n            writer._readyPromise_reject = reject;\n        });\n        writer._readyPromiseState = 'pending';\n    }\n    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseReject(writer, reason);\n    }\n    function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n        defaultWriterReadyPromiseResolve(writer);\n    }\n    function defaultWriterReadyPromiseReject(writer, reason) {\n        if (writer._readyPromise_reject === undefined) {\n            return;\n        }\n        setPromiseIsHandledToTrue(writer._readyPromise);\n        writer._readyPromise_reject(reason);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'rejected';\n    }\n    function defaultWriterReadyPromiseReset(writer) {\n        defaultWriterReadyPromiseInitialize(writer);\n    }\n    function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n    }\n    function defaultWriterReadyPromiseResolve(writer) {\n        if (writer._readyPromise_resolve === undefined) {\n            return;\n        }\n        writer._readyPromise_resolve(undefined);\n        writer._readyPromise_resolve = undefined;\n        writer._readyPromise_reject = undefined;\n        writer._readyPromiseState = 'fulfilled';\n    }\n\n    /// <reference lib=\"dom\" />\n    const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;\n\n    /// <reference types=\"node\" />\n    function isDOMExceptionConstructor(ctor) {\n        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {\n            return false;\n        }\n        try {\n            new ctor();\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    function createDOMExceptionPolyfill() {\n        // eslint-disable-next-line no-shadow\n        const ctor = function DOMException(message, name) {\n            this.message = message || '';\n            this.name = name || 'Error';\n            if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n            }\n        };\n        ctor.prototype = Object.create(Error.prototype);\n        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });\n        return ctor;\n    }\n    // eslint-disable-next-line no-redeclare\n    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n        const reader = AcquireReadableStreamDefaultReader(source);\n        const writer = AcquireWritableStreamDefaultWriter(dest);\n        source._disturbed = true;\n        let shuttingDown = false;\n        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n        let currentWrite = promiseResolvedWith(undefined);\n        return newPromise((resolve, reject) => {\n            let abortAlgorithm;\n            if (signal !== undefined) {\n                abortAlgorithm = () => {\n                    const error = new DOMException$1('Aborted', 'AbortError');\n                    const actions = [];\n                    if (!preventAbort) {\n                        actions.push(() => {\n                            if (dest._state === 'writable') {\n                                return WritableStreamAbort(dest, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    if (!preventCancel) {\n                        actions.push(() => {\n                            if (source._state === 'readable') {\n                                return ReadableStreamCancel(source, error);\n                            }\n                            return promiseResolvedWith(undefined);\n                        });\n                    }\n                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);\n                };\n                if (signal.aborted) {\n                    abortAlgorithm();\n                    return;\n                }\n                signal.addEventListener('abort', abortAlgorithm);\n            }\n            // Using reader and writer, read all chunks from this and write them to dest\n            // - Backpressure must be enforced\n            // - Shutdown must stop all activity\n            function pipeLoop() {\n                return newPromise((resolveLoop, rejectLoop) => {\n                    function next(done) {\n                        if (done) {\n                            resolveLoop();\n                        }\n                        else {\n                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n                            PerformPromiseThen(pipeStep(), next, rejectLoop);\n                        }\n                    }\n                    next(false);\n                });\n            }\n            function pipeStep() {\n                if (shuttingDown) {\n                    return promiseResolvedWith(true);\n                }\n                return PerformPromiseThen(writer._readyPromise, () => {\n                    return newPromise((resolveRead, rejectRead) => {\n                        ReadableStreamDefaultReaderRead(reader, {\n                            _chunkSteps: chunk => {\n                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                                resolveRead(false);\n                            },\n                            _closeSteps: () => resolveRead(true),\n                            _errorSteps: rejectRead\n                        });\n                    });\n                });\n            }\n            // Errors must be propagated forward\n            isOrBecomesErrored(source, reader._closedPromise, storedError => {\n                if (!preventAbort) {\n                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n            });\n            // Errors must be propagated backward\n            isOrBecomesErrored(dest, writer._closedPromise, storedError => {\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n                }\n                else {\n                    shutdown(true, storedError);\n                }\n            });\n            // Closing must be propagated forward\n            isOrBecomesClosed(source, reader._closedPromise, () => {\n                if (!preventClose) {\n                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                }\n                else {\n                    shutdown();\n                }\n            });\n            // Closing must be propagated backward\n            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n                if (!preventCancel) {\n                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n                }\n                else {\n                    shutdown(true, destClosed);\n                }\n            }\n            setPromiseIsHandledToTrue(pipeLoop());\n            function waitForWritesToFinish() {\n                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n                // for that too.\n                const oldCurrentWrite = currentWrite;\n                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);\n            }\n            function isOrBecomesErrored(stream, promise, action) {\n                if (stream._state === 'errored') {\n                    action(stream._storedError);\n                }\n                else {\n                    uponRejection(promise, action);\n                }\n            }\n            function isOrBecomesClosed(stream, promise, action) {\n                if (stream._state === 'closed') {\n                    action();\n                }\n                else {\n                    uponFulfillment(promise, action);\n                }\n            }\n            function shutdownWithAction(action, originalIsError, originalError) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), doTheRest);\n                }\n                else {\n                    doTheRest();\n                }\n                function doTheRest() {\n                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));\n                }\n            }\n            function shutdown(isError, error) {\n                if (shuttingDown) {\n                    return;\n                }\n                shuttingDown = true;\n                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n                }\n                else {\n                    finalize(isError, error);\n                }\n            }\n            function finalize(isError, error) {\n                WritableStreamDefaultWriterRelease(writer);\n                ReadableStreamReaderGenericRelease(reader);\n                if (signal !== undefined) {\n                    signal.removeEventListener('abort', abortAlgorithm);\n                }\n                if (isError) {\n                    reject(error);\n                }\n                else {\n                    resolve(undefined);\n                }\n            }\n        });\n    }\n\n    /**\n     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n     *\n     * @public\n     */\n    class ReadableStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n         */\n        get desiredSize() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('desiredSize');\n            }\n            return ReadableStreamDefaultControllerGetDesiredSize(this);\n        }\n        /**\n         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n         * the stream, but once those are read, the stream will become closed.\n         */\n        close() {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('close');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits close');\n            }\n            ReadableStreamDefaultControllerClose(this);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('enqueue');\n            }\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError('The stream is not in a state that permits enqueue');\n            }\n            return ReadableStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n         */\n        error(e = undefined) {\n            if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1('error');\n            }\n            ReadableStreamDefaultControllerError(this, e);\n        }\n        /** @internal */\n        [CancelSteps](reason) {\n            ResetQueue(this);\n            const result = this._cancelAlgorithm(reason);\n            ReadableStreamDefaultControllerClearAlgorithms(this);\n            return result;\n        }\n        /** @internal */\n        [PullSteps](readRequest) {\n            const stream = this._controlledReadableStream;\n            if (this._queue.length > 0) {\n                const chunk = DequeueValue(this);\n                if (this._closeRequested && this._queue.length === 0) {\n                    ReadableStreamDefaultControllerClearAlgorithms(this);\n                    ReadableStreamClose(stream);\n                }\n                else {\n                    ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                }\n                readRequest._chunkSteps(chunk);\n            }\n            else {\n                ReadableStreamAddReadRequest(stream, readRequest);\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n            }\n        }\n    }\n    Object.defineProperties(ReadableStreamDefaultController.prototype, {\n        close: { enumerable: true },\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStreamDefaultController.\n    function IsReadableStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n            return false;\n        }\n        return x instanceof ReadableStreamDefaultController;\n    }\n    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n        if (!shouldPull) {\n            return;\n        }\n        if (controller._pulling) {\n            controller._pullAgain = true;\n            return;\n        }\n        controller._pulling = true;\n        const pullPromise = controller._pullAlgorithm();\n        uponPromise(pullPromise, () => {\n            controller._pulling = false;\n            if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }\n        }, e => {\n            ReadableStreamDefaultControllerError(controller, e);\n        });\n    }\n    function ReadableStreamDefaultControllerShouldCallPull(controller) {\n        const stream = controller._controlledReadableStream;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return false;\n        }\n        if (!controller._started) {\n            return false;\n        }\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            return true;\n        }\n        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n        if (desiredSize > 0) {\n            return true;\n        }\n        return false;\n    }\n    function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n        controller._pullAlgorithm = undefined;\n        controller._cancelAlgorithm = undefined;\n        controller._strategySizeAlgorithm = undefined;\n    }\n    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n    function ReadableStreamDefaultControllerClose(controller) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        controller._closeRequested = true;\n        if (controller._queue.length === 0) {\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\n            ReadableStreamClose(stream);\n        }\n    }\n    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n            return;\n        }\n        const stream = controller._controlledReadableStream;\n        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n            ReadableStreamFulfillReadRequest(stream, chunk, false);\n        }\n        else {\n            let chunkSize;\n            try {\n                chunkSize = controller._strategySizeAlgorithm(chunk);\n            }\n            catch (chunkSizeE) {\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                throw chunkSizeE;\n            }\n            try {\n                EnqueueValueWithSize(controller, chunk, chunkSize);\n            }\n            catch (enqueueE) {\n                ReadableStreamDefaultControllerError(controller, enqueueE);\n                throw enqueueE;\n            }\n        }\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }\n    function ReadableStreamDefaultControllerError(controller, e) {\n        const stream = controller._controlledReadableStream;\n        if (stream._state !== 'readable') {\n            return;\n        }\n        ResetQueue(controller);\n        ReadableStreamDefaultControllerClearAlgorithms(controller);\n        ReadableStreamError(stream, e);\n    }\n    function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (state === 'errored') {\n            return null;\n        }\n        if (state === 'closed') {\n            return 0;\n        }\n        return controller._strategyHWM - controller._queueTotalSize;\n    }\n    // This is used in the implementation of TransformStream.\n    function ReadableStreamDefaultControllerHasBackpressure(controller) {\n        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n            return false;\n        }\n        return true;\n    }\n    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n        const state = controller._controlledReadableStream._state;\n        if (!controller._closeRequested && state === 'readable') {\n            return true;\n        }\n        return false;\n    }\n    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n        controller._controlledReadableStream = stream;\n        controller._queue = undefined;\n        controller._queueTotalSize = undefined;\n        ResetQueue(controller);\n        controller._started = false;\n        controller._closeRequested = false;\n        controller._pullAgain = false;\n        controller._pulling = false;\n        controller._strategySizeAlgorithm = sizeAlgorithm;\n        controller._strategyHWM = highWaterMark;\n        controller._pullAlgorithm = pullAlgorithm;\n        controller._cancelAlgorithm = cancelAlgorithm;\n        stream._readableStreamController = controller;\n        const startResult = startAlgorithm();\n        uponPromise(promiseResolvedWith(startResult), () => {\n            controller._started = true;\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n        }, r => {\n            ReadableStreamDefaultControllerError(controller, r);\n        });\n    }\n    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        let startAlgorithm = () => undefined;\n        let pullAlgorithm = () => promiseResolvedWith(undefined);\n        let cancelAlgorithm = () => promiseResolvedWith(undefined);\n        if (underlyingSource.start !== undefined) {\n            startAlgorithm = () => underlyingSource.start(controller);\n        }\n        if (underlyingSource.pull !== undefined) {\n            pullAlgorithm = () => underlyingSource.pull(controller);\n        }\n        if (underlyingSource.cancel !== undefined) {\n            cancelAlgorithm = reason => underlyingSource.cancel(reason);\n        }\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    }\n    // Helper functions for the ReadableStreamDefaultController.\n    function defaultControllerBrandCheckException$1(name) {\n        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n    }\n\n    function ReadableStreamTee(stream, cloneForBranch2) {\n        if (IsReadableByteStreamController(stream._readableStreamController)) {\n            return ReadableByteStreamTee(stream);\n        }\n        return ReadableStreamDefaultTee(stream);\n    }\n    function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n        const reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgain = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function pullAlgorithm() {\n            if (reading) {\n                readAgain = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(() => {\n                        readAgain = false;\n                        const chunk1 = chunk;\n                        const chunk2 = chunk;\n                        // There is no way to access the cloning code right now in the reference implementation.\n                        // If we add one then we'll need an implementation for serializable objects.\n                        // if (!canceled2 && cloneForBranch2) {\n                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n                        // }\n                        if (!canceled1) {\n                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgain) {\n                            pullAlgorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            // do nothing\n        }\n        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n        uponRejection(reader._closedPromise, (r) => {\n            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n            if (!canceled1 || !canceled2) {\n                resolveCancelPromise(undefined);\n            }\n        });\n        return [branch1, branch2];\n    }\n    function ReadableByteStreamTee(stream) {\n        let reader = AcquireReadableStreamDefaultReader(stream);\n        let reading = false;\n        let readAgainForBranch1 = false;\n        let readAgainForBranch2 = false;\n        let canceled1 = false;\n        let canceled2 = false;\n        let reason1;\n        let reason2;\n        let branch1;\n        let branch2;\n        let resolveCancelPromise;\n        const cancelPromise = newPromise(resolve => {\n            resolveCancelPromise = resolve;\n        });\n        function forwardReaderError(thisReader) {\n            uponRejection(thisReader._closedPromise, r => {\n                if (thisReader !== reader) {\n                    return;\n                }\n                ReadableByteStreamControllerError(branch1._readableStreamController, r);\n                ReadableByteStreamControllerError(branch2._readableStreamController, r);\n                if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(undefined);\n                }\n            });\n        }\n        function pullWithDefaultReader() {\n            if (IsReadableStreamBYOBReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamDefaultReader(stream);\n                forwardReaderError(reader);\n            }\n            const readRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const chunk1 = chunk;\n                        let chunk2 = chunk;\n                        if (!canceled1 && !canceled2) {\n                            try {\n                                chunk2 = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                        }\n                        if (!canceled1) {\n                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                        }\n                        if (!canceled2) {\n                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: () => {\n                    reading = false;\n                    if (!canceled1) {\n                        ReadableByteStreamControllerClose(branch1._readableStreamController);\n                    }\n                    if (!canceled2) {\n                        ReadableByteStreamControllerClose(branch2._readableStreamController);\n                    }\n                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                    }\n                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                    }\n                    if (!canceled1 || !canceled2) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamDefaultReaderRead(reader, readRequest);\n        }\n        function pullWithBYOBReader(view, forBranch2) {\n            if (IsReadableStreamDefaultReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamBYOBReader(stream);\n                forwardReaderError(reader);\n            }\n            const byobBranch = forBranch2 ? branch2 : branch1;\n            const otherBranch = forBranch2 ? branch1 : branch2;\n            const readIntoRequest = {\n                _chunkSteps: chunk => {\n                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n                    // successful synchronously-available reads get ahead of asynchronously-available errors.\n                    queueMicrotask(() => {\n                        readAgainForBranch1 = false;\n                        readAgainForBranch2 = false;\n                        const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                        const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                        if (!otherCanceled) {\n                            let clonedChunk;\n                            try {\n                                clonedChunk = CloneAsUint8Array(chunk);\n                            }\n                            catch (cloneE) {\n                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                                return;\n                            }\n                            if (!byobCanceled) {\n                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                            }\n                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                        }\n                        else if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        reading = false;\n                        if (readAgainForBranch1) {\n                            pull1Algorithm();\n                        }\n                        else if (readAgainForBranch2) {\n                            pull2Algorithm();\n                        }\n                    });\n                },\n                _closeSteps: chunk => {\n                    reading = false;\n                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                    if (!byobCanceled) {\n                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                    }\n                    if (!otherCanceled) {\n                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                    }\n                    if (chunk !== undefined) {\n                        if (!byobCanceled) {\n                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                        }\n                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                        }\n                    }\n                    if (!byobCanceled || !otherCanceled) {\n                        resolveCancelPromise(undefined);\n                    }\n                },\n                _errorSteps: () => {\n                    reading = false;\n                }\n            };\n            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n        }\n        function pull1Algorithm() {\n            if (reading) {\n                readAgainForBranch1 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, false);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function pull2Algorithm() {\n            if (reading) {\n                readAgainForBranch2 = true;\n                return promiseResolvedWith(undefined);\n            }\n            reading = true;\n            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n            if (byobRequest === null) {\n                pullWithDefaultReader();\n            }\n            else {\n                pullWithBYOBReader(byobRequest._view, true);\n            }\n            return promiseResolvedWith(undefined);\n        }\n        function cancel1Algorithm(reason) {\n            canceled1 = true;\n            reason1 = reason;\n            if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function cancel2Algorithm(reason) {\n            canceled2 = true;\n            reason2 = reason;\n            if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n            }\n            return cancelPromise;\n        }\n        function startAlgorithm() {\n            return;\n        }\n        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n        forwardReaderError(reader);\n        return [branch1, branch2];\n    }\n\n    function convertUnderlyingDefaultOrByteSource(source, context) {\n        assertDictionary(source, context);\n        const original = source;\n        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n        const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n        const pull = original === null || original === void 0 ? void 0 : original.pull;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const type = original === null || original === void 0 ? void 0 : original.type;\n        return {\n            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?\n                undefined :\n                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n            cancel: cancel === undefined ?\n                undefined :\n                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n            pull: pull === undefined ?\n                undefined :\n                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n            start: start === undefined ?\n                undefined :\n                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)\n        };\n    }\n    function convertUnderlyingSourceCancelCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (reason) => promiseCall(fn, original, [reason]);\n    }\n    function convertUnderlyingSourcePullCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertUnderlyingSourceStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertReadableStreamType(type, context) {\n        type = `${type}`;\n        if (type !== 'bytes') {\n            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n        }\n        return type;\n    }\n\n    function convertReaderOptions(options, context) {\n        assertDictionary(options, context);\n        const mode = options === null || options === void 0 ? void 0 : options.mode;\n        return {\n            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n        };\n    }\n    function convertReadableStreamReaderMode(mode, context) {\n        mode = `${mode}`;\n        if (mode !== 'byob') {\n            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n        }\n        return mode;\n    }\n\n    function convertIteratorOptions(options, context) {\n        assertDictionary(options, context);\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        return { preventCancel: Boolean(preventCancel) };\n    }\n\n    function convertPipeOptions(options, context) {\n        assertDictionary(options, context);\n        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n        const signal = options === null || options === void 0 ? void 0 : options.signal;\n        if (signal !== undefined) {\n            assertAbortSignal(signal, `${context} has member 'signal' that`);\n        }\n        return {\n            preventAbort: Boolean(preventAbort),\n            preventCancel: Boolean(preventCancel),\n            preventClose: Boolean(preventClose),\n            signal\n        };\n    }\n    function assertAbortSignal(signal, context) {\n        if (!isAbortSignal(signal)) {\n            throw new TypeError(`${context} is not an AbortSignal.`);\n        }\n    }\n\n    function convertReadableWritablePair(pair, context) {\n        assertDictionary(pair, context);\n        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n        assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n        assertReadableStream(readable, `${context} has member 'readable' that`);\n        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n        assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n        assertWritableStream(writable, `${context} has member 'writable' that`);\n        return { readable, writable };\n    }\n\n    /**\n     * A readable stream represents a source of data, from which you can read.\n     *\n     * @public\n     */\n    class ReadableStream {\n        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n            if (rawUnderlyingSource === undefined) {\n                rawUnderlyingSource = null;\n            }\n            else {\n                assertObject(rawUnderlyingSource, 'First parameter');\n            }\n            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n            InitializeReadableStream(this);\n            if (underlyingSource.type === 'bytes') {\n                if (strategy.size !== undefined) {\n                    throw new RangeError('The strategy for a byte stream cannot have a size function');\n                }\n                const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n            }\n            else {\n                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n            }\n        }\n        /**\n         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n         */\n        get locked() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('locked');\n            }\n            return IsReadableStreamLocked(this);\n        }\n        /**\n         * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n         *\n         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n         * method, which might or might not use it.\n         */\n        cancel(reason = undefined) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n            }\n            return ReadableStreamCancel(this, reason);\n        }\n        getReader(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('getReader');\n            }\n            const options = convertReaderOptions(rawOptions, 'First parameter');\n            if (options.mode === undefined) {\n                return AcquireReadableStreamDefaultReader(this);\n            }\n            return AcquireReadableStreamBYOBReader(this);\n        }\n        pipeThrough(rawTransform, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('pipeThrough');\n            }\n            assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n            const transform = convertReadableWritablePair(rawTransform, 'First parameter');\n            const options = convertPipeOptions(rawOptions, 'Second parameter');\n            if (IsReadableStreamLocked(this)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n            }\n            if (IsWritableStreamLocked(transform.writable)) {\n                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n            }\n            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n            setPromiseIsHandledToTrue(promise);\n            return transform.readable;\n        }\n        pipeTo(destination, rawOptions = {}) {\n            if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n            }\n            if (destination === undefined) {\n                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n            }\n            if (!IsWritableStream(destination)) {\n                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n            }\n            let options;\n            try {\n                options = convertPipeOptions(rawOptions, 'Second parameter');\n            }\n            catch (e) {\n                return promiseRejectedWith(e);\n            }\n            if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n            }\n            if (IsWritableStreamLocked(destination)) {\n                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n            }\n            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n        }\n        /**\n         * Tees this readable stream, returning a two-element array containing the two resulting branches as\n         * new {@link ReadableStream} instances.\n         *\n         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n         * propagated to the stream's underlying source.\n         *\n         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n         * this could allow interference between the two branches.\n         */\n        tee() {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('tee');\n            }\n            const branches = ReadableStreamTee(this);\n            return CreateArrayFromList(branches);\n        }\n        values(rawOptions = undefined) {\n            if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1('values');\n            }\n            const options = convertIteratorOptions(rawOptions, 'First parameter');\n            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n        }\n    }\n    Object.defineProperties(ReadableStream.prototype, {\n        cancel: { enumerable: true },\n        getReader: { enumerable: true },\n        pipeThrough: { enumerable: true },\n        pipeTo: { enumerable: true },\n        tee: { enumerable: true },\n        values: { enumerable: true },\n        locked: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ReadableStream',\n            configurable: true\n        });\n    }\n    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {\n        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n            value: ReadableStream.prototype.values,\n            writable: true,\n            configurable: true\n        });\n    }\n    // Abstract operations for the ReadableStream.\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableStreamDefaultController.prototype);\n        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n        return stream;\n    }\n    // Throws if and only if startAlgorithm throws.\n    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n        const stream = Object.create(ReadableStream.prototype);\n        InitializeReadableStream(stream);\n        const controller = Object.create(ReadableByteStreamController.prototype);\n        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n        return stream;\n    }\n    function InitializeReadableStream(stream) {\n        stream._state = 'readable';\n        stream._reader = undefined;\n        stream._storedError = undefined;\n        stream._disturbed = false;\n    }\n    function IsReadableStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n            return false;\n        }\n        return x instanceof ReadableStream;\n    }\n    function IsReadableStreamLocked(stream) {\n        if (stream._reader === undefined) {\n            return false;\n        }\n        return true;\n    }\n    // ReadableStream API exposed for controllers.\n    function ReadableStreamCancel(stream, reason) {\n        stream._disturbed = true;\n        if (stream._state === 'closed') {\n            return promiseResolvedWith(undefined);\n        }\n        if (stream._state === 'errored') {\n            return promiseRejectedWith(stream._storedError);\n        }\n        ReadableStreamClose(stream);\n        const reader = stream._reader;\n        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n            reader._readIntoRequests.forEach(readIntoRequest => {\n                readIntoRequest._closeSteps(undefined);\n            });\n            reader._readIntoRequests = new SimpleQueue();\n        }\n        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n        return transformPromiseWith(sourceCancelPromise, noop);\n    }\n    function ReadableStreamClose(stream) {\n        stream._state = 'closed';\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseResolve(reader);\n        if (IsReadableStreamDefaultReader(reader)) {\n            reader._readRequests.forEach(readRequest => {\n                readRequest._closeSteps();\n            });\n            reader._readRequests = new SimpleQueue();\n        }\n    }\n    function ReadableStreamError(stream, e) {\n        stream._state = 'errored';\n        stream._storedError = e;\n        const reader = stream._reader;\n        if (reader === undefined) {\n            return;\n        }\n        defaultReaderClosedPromiseReject(reader, e);\n        if (IsReadableStreamDefaultReader(reader)) {\n            reader._readRequests.forEach(readRequest => {\n                readRequest._errorSteps(e);\n            });\n            reader._readRequests = new SimpleQueue();\n        }\n        else {\n            reader._readIntoRequests.forEach(readIntoRequest => {\n                readIntoRequest._errorSteps(e);\n            });\n            reader._readIntoRequests = new SimpleQueue();\n        }\n    }\n    // Helper functions for the ReadableStream.\n    function streamBrandCheckException$1(name) {\n        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n    }\n\n    function convertQueuingStrategyInit(init, context) {\n        assertDictionary(init, context);\n        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n        return {\n            highWaterMark: convertUnrestrictedDouble(highWaterMark)\n        };\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const byteLengthSizeFunction = (chunk) => {\n        return chunk.byteLength;\n    };\n    try {\n        Object.defineProperty(byteLengthSizeFunction, 'name', {\n            value: 'size',\n            configurable: true\n        });\n    }\n    catch (_a) {\n        // This property is non-configurable in older browsers, so ignore if this throws.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n    }\n    /**\n     * A queuing strategy that counts the number of bytes in each chunk.\n     *\n     * @public\n     */\n    class ByteLengthQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('highWaterMark');\n            }\n            return this._byteLengthQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by returning the value of its `byteLength` property.\n         */\n        get size() {\n            if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException('size');\n            }\n            return byteLengthSizeFunction;\n        }\n    }\n    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n            value: 'ByteLengthQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the ByteLengthQueuingStrategy.\n    function byteLengthBrandCheckException(name) {\n        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n    }\n    function IsByteLengthQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof ByteLengthQueuingStrategy;\n    }\n\n    // The size function must not have a prototype property nor be a constructor\n    const countSizeFunction = () => {\n        return 1;\n    };\n    try {\n        Object.defineProperty(countSizeFunction, 'name', {\n            value: 'size',\n            configurable: true\n        });\n    }\n    catch (_a) {\n        // This property is non-configurable in older browsers, so ignore if this throws.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility\n    }\n    /**\n     * A queuing strategy that counts the number of chunks.\n     *\n     * @public\n     */\n    class CountQueuingStrategy {\n        constructor(options) {\n            assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n            options = convertQueuingStrategyInit(options, 'First parameter');\n            this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n        }\n        /**\n         * Returns the high water mark provided to the constructor.\n         */\n        get highWaterMark() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('highWaterMark');\n            }\n            return this._countQueuingStrategyHighWaterMark;\n        }\n        /**\n         * Measures the size of `chunk` by always returning 1.\n         * This ensures that the total queue size is a count of the number of chunks in the queue.\n         */\n        get size() {\n            if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException('size');\n            }\n            return countSizeFunction;\n        }\n    }\n    Object.defineProperties(CountQueuingStrategy.prototype, {\n        highWaterMark: { enumerable: true },\n        size: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n            value: 'CountQueuingStrategy',\n            configurable: true\n        });\n    }\n    // Helper functions for the CountQueuingStrategy.\n    function countBrandCheckException(name) {\n        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n    }\n    function IsCountQueuingStrategy(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n            return false;\n        }\n        return x instanceof CountQueuingStrategy;\n    }\n\n    function convertTransformer(original, context) {\n        assertDictionary(original, context);\n        const flush = original === null || original === void 0 ? void 0 : original.flush;\n        const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n        const start = original === null || original === void 0 ? void 0 : original.start;\n        const transform = original === null || original === void 0 ? void 0 : original.transform;\n        const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n        return {\n            flush: flush === undefined ?\n                undefined :\n                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n            readableType,\n            start: start === undefined ?\n                undefined :\n                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n            transform: transform === undefined ?\n                undefined :\n                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n            writableType\n        };\n    }\n    function convertTransformerFlushCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => promiseCall(fn, original, [controller]);\n    }\n    function convertTransformerStartCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (controller) => reflectCall(fn, original, [controller]);\n    }\n    function convertTransformerTransformCallback(fn, original, context) {\n        assertFunction(fn, context);\n        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n    }\n\n    // Class TransformStream\n    /**\n     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n     * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n     * made available for reading from the readable side.\n     *\n     * @public\n     */\n    class TransformStream {\n        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n            if (rawTransformer === undefined) {\n                rawTransformer = null;\n            }\n            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n            const transformer = convertTransformer(rawTransformer, 'First parameter');\n            if (transformer.readableType !== undefined) {\n                throw new RangeError('Invalid readableType specified');\n            }\n            if (transformer.writableType !== undefined) {\n                throw new RangeError('Invalid writableType specified');\n            }\n            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n            let startPromise_resolve;\n            const startPromise = newPromise(resolve => {\n                startPromise_resolve = resolve;\n            });\n            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n            if (transformer.start !== undefined) {\n                startPromise_resolve(transformer.start(this._transformStreamController));\n            }\n            else {\n                startPromise_resolve(undefined);\n            }\n        }\n        /**\n         * The readable side of the transform stream.\n         */\n        get readable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('readable');\n            }\n            return this._readable;\n        }\n        /**\n         * The writable side of the transform stream.\n         */\n        get writable() {\n            if (!IsTransformStream(this)) {\n                throw streamBrandCheckException('writable');\n            }\n            return this._writable;\n        }\n    }\n    Object.defineProperties(TransformStream.prototype, {\n        readable: { enumerable: true },\n        writable: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n            value: 'TransformStream',\n            configurable: true\n        });\n    }\n    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n        function startAlgorithm() {\n            return startPromise;\n        }\n        function writeAlgorithm(chunk) {\n            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n        }\n        function abortAlgorithm(reason) {\n            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n        }\n        function closeAlgorithm() {\n            return TransformStreamDefaultSinkCloseAlgorithm(stream);\n        }\n        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n        function pullAlgorithm() {\n            return TransformStreamDefaultSourcePullAlgorithm(stream);\n        }\n        function cancelAlgorithm(reason) {\n            TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n            return promiseResolvedWith(undefined);\n        }\n        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n        stream._backpressure = undefined;\n        stream._backpressureChangePromise = undefined;\n        stream._backpressureChangePromise_resolve = undefined;\n        TransformStreamSetBackpressure(stream, true);\n        stream._transformStreamController = undefined;\n    }\n    function IsTransformStream(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n            return false;\n        }\n        return x instanceof TransformStream;\n    }\n    // This is a no-op if both sides are already errored.\n    function TransformStreamError(stream, e) {\n        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n        TransformStreamErrorWritableAndUnblockWrite(stream, e);\n    }\n    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n        if (stream._backpressure) {\n            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n            // _backpressure is set.\n            TransformStreamSetBackpressure(stream, false);\n        }\n    }\n    function TransformStreamSetBackpressure(stream, backpressure) {\n        // Passes also when called during construction.\n        if (stream._backpressureChangePromise !== undefined) {\n            stream._backpressureChangePromise_resolve();\n        }\n        stream._backpressureChangePromise = newPromise(resolve => {\n            stream._backpressureChangePromise_resolve = resolve;\n        });\n        stream._backpressure = backpressure;\n    }\n    // Class TransformStreamDefaultController\n    /**\n     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n     *\n     * @public\n     */\n    class TransformStreamDefaultController {\n        constructor() {\n            throw new TypeError('Illegal constructor');\n        }\n        /**\n         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n         */\n        get desiredSize() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('desiredSize');\n            }\n            const readableController = this._controlledTransformStream._readable._readableStreamController;\n            return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n        }\n        enqueue(chunk = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('enqueue');\n            }\n            TransformStreamDefaultControllerEnqueue(this, chunk);\n        }\n        /**\n         * Errors both the readable side and the writable side of the controlled transform stream, making all future\n         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n         */\n        error(reason = undefined) {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('error');\n            }\n            TransformStreamDefaultControllerError(this, reason);\n        }\n        /**\n         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n         * transformer only needs to consume a portion of the chunks written to the writable side.\n         */\n        terminate() {\n            if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException('terminate');\n            }\n            TransformStreamDefaultControllerTerminate(this);\n        }\n    }\n    Object.defineProperties(TransformStreamDefaultController.prototype, {\n        enqueue: { enumerable: true },\n        error: { enumerable: true },\n        terminate: { enumerable: true },\n        desiredSize: { enumerable: true }\n    });\n    if (typeof SymbolPolyfill.toStringTag === 'symbol') {\n        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n            value: 'TransformStreamDefaultController',\n            configurable: true\n        });\n    }\n    // Transform Stream Default Controller Abstract Operations\n    function IsTransformStreamDefaultController(x) {\n        if (!typeIsObject(x)) {\n            return false;\n        }\n        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n            return false;\n        }\n        return x instanceof TransformStreamDefaultController;\n    }\n    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n        controller._controlledTransformStream = stream;\n        stream._transformStreamController = controller;\n        controller._transformAlgorithm = transformAlgorithm;\n        controller._flushAlgorithm = flushAlgorithm;\n    }\n    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n        const controller = Object.create(TransformStreamDefaultController.prototype);\n        let transformAlgorithm = (chunk) => {\n            try {\n                TransformStreamDefaultControllerEnqueue(controller, chunk);\n                return promiseResolvedWith(undefined);\n            }\n            catch (transformResultE) {\n                return promiseRejectedWith(transformResultE);\n            }\n        };\n        let flushAlgorithm = () => promiseResolvedWith(undefined);\n        if (transformer.transform !== undefined) {\n            transformAlgorithm = chunk => transformer.transform(chunk, controller);\n        }\n        if (transformer.flush !== undefined) {\n            flushAlgorithm = () => transformer.flush(controller);\n        }\n        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n    }\n    function TransformStreamDefaultControllerClearAlgorithms(controller) {\n        controller._transformAlgorithm = undefined;\n        controller._flushAlgorithm = undefined;\n    }\n    function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n            throw new TypeError('Readable side is not in a state that permits enqueue');\n        }\n        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n        // accept TransformStreamDefaultControllerEnqueue() calls.\n        try {\n            ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n        }\n        catch (e) {\n            // This happens when readableStrategy.size() throws.\n            TransformStreamErrorWritableAndUnblockWrite(stream, e);\n            throw stream._readable._storedError;\n        }\n        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n        if (backpressure !== stream._backpressure) {\n            TransformStreamSetBackpressure(stream, true);\n        }\n    }\n    function TransformStreamDefaultControllerError(controller, e) {\n        TransformStreamError(controller._controlledTransformStream, e);\n    }\n    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n        const transformPromise = controller._transformAlgorithm(chunk);\n        return transformPromiseWith(transformPromise, undefined, r => {\n            TransformStreamError(controller._controlledTransformStream, r);\n            throw r;\n        });\n    }\n    function TransformStreamDefaultControllerTerminate(controller) {\n        const stream = controller._controlledTransformStream;\n        const readableController = stream._readable._readableStreamController;\n        ReadableStreamDefaultControllerClose(readableController);\n        const error = new TypeError('TransformStream terminated');\n        TransformStreamErrorWritableAndUnblockWrite(stream, error);\n    }\n    // TransformStreamDefaultSink Algorithms\n    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n        const controller = stream._transformStreamController;\n        if (stream._backpressure) {\n            const backpressureChangePromise = stream._backpressureChangePromise;\n            return transformPromiseWith(backpressureChangePromise, () => {\n                const writable = stream._writable;\n                const state = writable._state;\n                if (state === 'erroring') {\n                    throw writable._storedError;\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n            });\n        }\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n    }\n    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n        // errored.\n        TransformStreamError(stream, reason);\n        return promiseResolvedWith(undefined);\n    }\n    function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n        // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n        const readable = stream._readable;\n        const controller = stream._transformStreamController;\n        const flushPromise = controller._flushAlgorithm();\n        TransformStreamDefaultControllerClearAlgorithms(controller);\n        // Return a promise that is fulfilled with undefined on success.\n        return transformPromiseWith(flushPromise, () => {\n            if (readable._state === 'errored') {\n                throw readable._storedError;\n            }\n            ReadableStreamDefaultControllerClose(readable._readableStreamController);\n        }, r => {\n            TransformStreamError(stream, r);\n            throw readable._storedError;\n        });\n    }\n    // TransformStreamDefaultSource Algorithms\n    function TransformStreamDefaultSourcePullAlgorithm(stream) {\n        // Invariant. Enforced by the promises returned by start() and pull().\n        TransformStreamSetBackpressure(stream, false);\n        // Prevent the next pull() call until there is backpressure.\n        return stream._backpressureChangePromise;\n    }\n    // Helper functions for the TransformStreamDefaultController.\n    function defaultControllerBrandCheckException(name) {\n        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n    }\n    // Helper functions for the TransformStream.\n    function streamBrandCheckException(name) {\n        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n    }\n\n    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n    exports.CountQueuingStrategy = CountQueuingStrategy;\n    exports.ReadableByteStreamController = ReadableByteStreamController;\n    exports.ReadableStream = ReadableStream;\n    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n    exports.TransformStream = TransformStream;\n    exports.TransformStreamDefaultController = TransformStreamDefaultController;\n    exports.WritableStream = WritableStream;\n    exports.WritableStreamDefaultController = WritableStreamDefaultController;\n    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ponyfill.es2018.js.map\n","module.exports = require(\"vscode\");","module.exports = require(\"buffer\");","module.exports = require(\"node:process\");","module.exports = require(\"node:stream/web\");","module.exports = require(\"worker_threads\");","/* c8 ignore start */\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\nif (!globalThis.ReadableStream) {\n  // `node:stream/web` got introduced in v16.5.0 as experimental\n  // and it's preferred over the polyfilled version. So we also\n  // suppress the warning that gets emitted by NodeJS for using it.\n  try {\n    const process = require('node:process')\n    const { emitWarning } = process\n    try {\n      process.emitWarning = () => {}\n      Object.assign(globalThis, require('node:stream/web'))\n      process.emitWarning = emitWarning\n    } catch (error) {\n      process.emitWarning = emitWarning\n      throw error\n    }\n  } catch (error) {\n    // fallback to polyfill implementation\n    Object.assign(globalThis, require('web-streams-polyfill/dist/ponyfill.es2018.js'))\n  }\n}\n\ntry {\n  // Don't use node: prefix for this, require+node: is not supported until node v14.14\n  // Only `import()` can use prefix in 12.20 and later\n  const { Blob } = require('buffer')\n  if (Blob && !Blob.prototype.stream) {\n    Blob.prototype.stream = function name (params) {\n      let position = 0\n      const blob = this\n\n      return new ReadableStream({\n        type: 'bytes',\n        async pull (ctrl) {\n          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))\n          const buffer = await chunk.arrayBuffer()\n          position += buffer.byteLength\n          ctrl.enqueue(new Uint8Array(buffer))\n\n          if (position === blob.size) {\n            ctrl.close()\n          }\n        }\n      })\n    }\n  }\n} catch (error) {}\n/* c8 ignore end */\n","import Blob from './index.js'\n\nconst _File = class File extends Blob {\n  #lastModified = 0\n  #name = ''\n\n  /**\n   * @param {*[]} fileBits\n   * @param {string} fileName\n   * @param {{lastModified?: number, type?: string}} options\n   */// @ts-ignore\n  constructor (fileBits, fileName, options = {}) {\n    if (arguments.length < 2) {\n      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)\n    }\n    super(fileBits, options)\n\n    if (options === null) options = {}\n\n    // Simulate WebIDL type casting for NaN value in lastModified option.\n    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)\n    if (!Number.isNaN(lastModified)) {\n      this.#lastModified = lastModified\n    }\n\n    this.#name = String(fileName)\n  }\n\n  get name () {\n    return this.#name\n  }\n\n  get lastModified () {\n    return this.#lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return !!object && object instanceof Blob &&\n      /^(File)$/.test(object[Symbol.toStringTag])\n  }\n}\n\n/** @type {typeof globalThis.File} */// @ts-ignore\nexport const File = _File\nexport default File\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:fs\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:path\");","import { statSync, createReadStream, promises as fs } from 'node:fs'\nimport { basename } from 'node:path'\nimport DOMException from 'node-domexception'\n\nimport File from './file.js'\nimport Blob from './index.js'\n\nconst { stat } = fs\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst blobFromSync = (path, type) => fromBlob(statSync(path), path, type)\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<Blob>}\n */\nconst blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n * @returns {Promise<File>}\n */\nconst fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))\n\n/**\n * @param {string} path filepath on the disk\n * @param {string} [type] mimetype to use\n */\nconst fileFromSync = (path, type) => fromFile(statSync(path), path, type)\n\n// @ts-ignore\nconst fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], { type })\n\n// @ts-ignore\nconst fromFile = (stat, path, type = '') => new File([new BlobDataItem({\n  path,\n  size: stat.size,\n  lastModified: stat.mtimeMs,\n  start: 0\n})], basename(path), { type, lastModified: stat.mtimeMs })\n\n/**\n * This is a blob backed up by a file on the disk\n * with minium requirement. Its wrapped around a Blob as a blobPart\n * so you have no direct access to this.\n *\n * @private\n */\nclass BlobDataItem {\n  #path\n  #start\n\n  constructor (options) {\n    this.#path = options.path\n    this.#start = options.start\n    this.size = options.size\n    this.lastModified = options.lastModified\n  }\n\n  /**\n   * Slicing arguments is first validated and formatted\n   * to not be out of range by Blob.prototype.slice\n   */\n  slice (start, end) {\n    return new BlobDataItem({\n      path: this.#path,\n      lastModified: this.lastModified,\n      size: end - start,\n      start: this.#start + start\n    })\n  }\n\n  async * stream () {\n    const { mtimeMs } = await stat(this.#path)\n    if (mtimeMs > this.lastModified) {\n      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')\n    }\n    yield * createReadStream(this.#path, {\n      start: this.#start,\n      end: this.#start + this.size - 1\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n}\n\nexport default blobFromSync\nexport { File, Blob, blobFrom, blobFromSync, fileFrom, fileFromSync }\n","/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\n\nimport './streams.cjs'\n\n// 64 KiB (same size chrome slice theirs blob into Uint8array's)\nconst POOL_SIZE = 65536\n\n/** @param {(Blob | Uint8Array)[]} parts */\nasync function * toIterator (parts, clone = true) {\n  for (const part of parts) {\n    if ('stream' in part) {\n      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))\n    } else if (ArrayBuffer.isView(part)) {\n      if (clone) {\n        let position = part.byteOffset\n        const end = part.byteOffset + part.byteLength\n        while (position !== end) {\n          const size = Math.min(end - position, POOL_SIZE)\n          const chunk = part.buffer.slice(position, position + size)\n          position += chunk.byteLength\n          yield new Uint8Array(chunk)\n        }\n      } else {\n        yield part\n      }\n    /* c8 ignore next 10 */\n    } else {\n      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n      let position = 0, b = (/** @type {Blob} */ (part))\n      while (position !== b.size) {\n        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))\n        const buffer = await chunk.arrayBuffer()\n        position += buffer.byteLength\n        yield new Uint8Array(buffer)\n      }\n    }\n  }\n}\n\nconst _Blob = class Blob {\n  /** @type {Array.<(Blob|Uint8Array)>} */\n  #parts = []\n  #type = ''\n  #size = 0\n  #endings = 'transparent'\n\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  constructor (blobParts = [], options = {}) {\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.')\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.')\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.')\n    }\n\n    if (options === null) options = {}\n\n    const encoder = new TextEncoder()\n    for (const element of blobParts) {\n      let part\n      if (ArrayBuffer.isView(element)) {\n        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))\n      } else if (element instanceof ArrayBuffer) {\n        part = new Uint8Array(element.slice(0))\n      } else if (element instanceof Blob) {\n        part = element\n      } else {\n        part = encoder.encode(`${element}`)\n      }\n\n      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size\n      this.#parts.push(part)\n    }\n\n    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`\n    const type = options.type === undefined ? '' : String(options.type)\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : ''\n  }\n\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n  get size () {\n    return this.#size\n  }\n\n  /**\n   * The type property of a Blob object returns the MIME type of the file.\n   */\n  get type () {\n    return this.#type\n  }\n\n  /**\n   * The text() method in the Blob interface returns a Promise\n   * that resolves with a string containing the contents of\n   * the blob, interpreted as UTF-8.\n   *\n   * @return {Promise<string>}\n   */\n  async text () {\n    // More optimized than using this.arrayBuffer()\n    // that requires twice as much ram\n    const decoder = new TextDecoder()\n    let str = ''\n    for await (const part of toIterator(this.#parts, false)) {\n      str += decoder.decode(part, { stream: true })\n    }\n    // Remaining\n    str += decoder.decode()\n    return str\n  }\n\n  /**\n   * The arrayBuffer() method in the Blob interface returns a\n   * Promise that resolves with the contents of the blob as\n   * binary data contained in an ArrayBuffer.\n   *\n   * @return {Promise<ArrayBuffer>}\n   */\n  async arrayBuffer () {\n    // Easier way... Just a unnecessary overhead\n    // const view = new Uint8Array(this.size);\n    // await this.stream().getReader({mode: 'byob'}).read(view);\n    // return view.buffer;\n\n    const data = new Uint8Array(this.size)\n    let offset = 0\n    for await (const chunk of toIterator(this.#parts, false)) {\n      data.set(chunk, offset)\n      offset += chunk.length\n    }\n\n    return data.buffer\n  }\n\n  stream () {\n    const it = toIterator(this.#parts, true)\n\n    return new globalThis.ReadableStream({\n      // @ts-ignore\n      type: 'bytes',\n      async pull (ctrl) {\n        const chunk = await it.next()\n        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)\n      },\n\n      async cancel () {\n        await it.return()\n      }\n    })\n  }\n\n  /**\n   * The Blob interface's slice() method creates and returns a\n   * new Blob object which contains data from a subset of the\n   * blob on which it's called.\n   *\n   * @param {number} [start]\n   * @param {number} [end]\n   * @param {string} [type]\n   */\n  slice (start = 0, end = this.size, type = '') {\n    const { size } = this\n\n    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)\n    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)\n\n    const span = Math.max(relativeEnd - relativeStart, 0)\n    const parts = this.#parts\n    const blobParts = []\n    let added = 0\n\n    for (const part of parts) {\n      // don't add the overflow to new blobParts\n      if (added >= span) {\n        break\n      }\n\n      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size\n      if (relativeStart && size <= relativeStart) {\n        // Skip the beginning and change the relative\n        // start & end position as we skip the unwanted parts\n        relativeStart -= size\n        relativeEnd -= size\n      } else {\n        let chunk\n        if (ArrayBuffer.isView(part)) {\n          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.byteLength\n        } else {\n          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))\n          added += chunk.size\n        }\n        relativeEnd -= size\n        blobParts.push(chunk)\n        relativeStart = 0 // All next sequential parts should start at 0\n      }\n    }\n\n    const blob = new Blob([], { type: String(type).toLowerCase() })\n    blob.#size = span\n    blob.#parts = blobParts\n\n    return blob\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Blob'\n  }\n\n  static [Symbol.hasInstance] (object) {\n    return (\n      object &&\n      typeof object === 'object' &&\n      typeof object.constructor === 'function' &&\n      (\n        typeof object.stream === 'function' ||\n        typeof object.arrayBuffer === 'function'\n      ) &&\n      /^(Blob|File)$/.test(object[Symbol.toStringTag])\n    )\n  }\n}\n\nObject.defineProperties(_Blob.prototype, {\n  size: { enumerable: true },\n  type: { enumerable: true },\n  slice: { enumerable: true }\n})\n\n/** @type {typeof globalThis.Blob} */\nexport const Blob = _Blob\nexport default Blob\n","/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */\n\nimport C from 'fetch-blob'\nimport F from 'fetch-blob/file.js'\n\nvar {toStringTag:t,iterator:i,hasInstance:h}=Symbol,\nr=Math.random,\nm='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\nf=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new F([b],c,b):b]:[a,b+'']),\ne=(c,f)=>(f?c:c.replace(/\\r?\\n|\\r/g,'\\r\\n')).replace(/\\n/g,'%0A').replace(/\\r/g,'%0D').replace(/\"/g,'%22'),\nx=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}\n\nexport const File = F\n\n/** @type {typeof globalThis.FormData} */\nexport const FormData = class FormData {\n#d=[];\nconstructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}\nget [t]() {return 'FormData'}\n[i](){return this.entries()}\nstatic [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}\nappend(...a){x('append',arguments,2);this.#d.push(f(...a))}\ndelete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}\nget(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}\ngetAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}\nhas(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}\nforEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}\nset(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}\n*entries(){yield*this.#d}\n*keys(){for(var[a]of this)yield a}\n*values(){for(var[,a]of this)yield a}}\n\n/** @param {FormData} F */\nexport function formDataToBlob (F,B=C){\nvar b=`${r()}${r()}`.replace(/\\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\\r\\nContent-Disposition: form-data; name=\"`\nF.forEach((v,n)=>typeof v=='string'\n?c.push(p+e(n)+`\"\\r\\n\\r\\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n')}\\r\\n`)\n:c.push(p+e(n)+`\"; filename=\"${e(v.name, 1)}\"\\r\\nContent-Type: ${v.type||\"application/octet-stream\"}\\r\\n\\r\\n`, v, '\\r\\n'))\nc.push(`--${b}--`)\nreturn new B(c,{type:\"multipart/form-data; boundary=\"+b})}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:http\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:https\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:zlib\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:stream\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:buffer\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:util\");","export class FetchBaseError extends Error {\n\tconstructor(message, type) {\n\t\tsuper(message);\n\t\t// Hide custom error implementation details from end-users\n\t\tError.captureStackTrace(this, this.constructor);\n\n\t\tthis.type = type;\n\t}\n\n\tget name() {\n\t\treturn this.constructor.name;\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n}\n","\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n","/**\n * Is.js\n *\n * Object type checks.\n */\n\nconst NAME = Symbol.toStringTag;\n\n/**\n * Check if `obj` is a URLSearchParams object\n * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isURLSearchParameters = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.append === 'function' &&\n\t\ttypeof object.delete === 'function' &&\n\t\ttypeof object.get === 'function' &&\n\t\ttypeof object.getAll === 'function' &&\n\t\ttypeof object.has === 'function' &&\n\t\ttypeof object.set === 'function' &&\n\t\ttypeof object.sort === 'function' &&\n\t\tobject[NAME] === 'URLSearchParams'\n\t);\n};\n\n/**\n * Check if `object` is a W3C `Blob` object (which `File` inherits from)\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isBlob = object => {\n\treturn (\n\t\tobject &&\n\t\ttypeof object === 'object' &&\n\t\ttypeof object.arrayBuffer === 'function' &&\n\t\ttypeof object.type === 'string' &&\n\t\ttypeof object.stream === 'function' &&\n\t\ttypeof object.constructor === 'function' &&\n\t\t/^(Blob|File)$/.test(object[NAME])\n\t);\n};\n\n/**\n * Check if `obj` is an instance of AbortSignal.\n * @param {*} object - Object to check for\n * @return {boolean}\n */\nexport const isAbortSignal = object => {\n\treturn (\n\t\ttypeof object === 'object' && (\n\t\t\tobject[NAME] === 'AbortSignal' ||\n\t\t\tobject[NAME] === 'EventTarget'\n\t\t)\n\t);\n};\n\n/**\n * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of\n * the parent domain.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isDomainOrSubdomain = (destination, original) => {\n\tconst orig = new URL(original).hostname;\n\tconst dest = new URL(destination).hostname;\n\n\treturn orig === dest || orig.endsWith(`.${dest}`);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nexport const isSameProtocol = (destination, original) => {\n\tconst orig = new URL(original).protocol;\n\tconst dest = new URL(destination).protocol;\n\n\treturn orig === dest;\n};\n","\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n","/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\n\nimport {types} from 'node:util';\nimport http from 'node:http';\n\n/* c8 ignore next 9 */\nconst validateHeaderName = typeof http.validateHeaderName === 'function' ?\n\thttp.validateHeaderName :\n\tname => {\n\t\tif (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n\t\t\tconst error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/* c8 ignore next 9 */\nconst validateHeaderValue = typeof http.validateHeaderValue === 'function' ?\n\thttp.validateHeaderValue :\n\t(name, value) => {\n\t\tif (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n\t\t\tconst error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n\t\t\tObject.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});\n\t\t\tthrow error;\n\t\t}\n\t};\n\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\nexport default class Headers extends URLSearchParams {\n\t/**\n\t * Headers class\n\t *\n\t * @constructor\n\t * @param {HeadersInit} [init] - Response headers\n\t */\n\tconstructor(init) {\n\t\t// Validate and normalize init object in [name, value(s)][]\n\t\t/** @type {string[][]} */\n\t\tlet result = [];\n\t\tif (init instanceof Headers) {\n\t\t\tconst raw = init.raw();\n\t\t\tfor (const [name, values] of Object.entries(raw)) {\n\t\t\t\tresult.push(...values.map(value => [name, value]));\n\t\t\t}\n\t\t} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\t\t// No op\n\t\t} else if (typeof init === 'object' && !types.isBoxedPrimitive(init)) {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\t\tif (method == null) {\n\t\t\t\t// Record<ByteString, ByteString>\n\t\t\t\tresult.push(...Object.entries(init));\n\t\t\t} else {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// Sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tresult = [...init]\n\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof pair !== 'object' || types.isBoxedPrimitive(pair)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be an iterable object');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t}).map(pair => {\n\t\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [...pair];\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n\t\t}\n\n\t\t// Validate and lowercase\n\t\tresult =\n\t\t\tresult.length > 0 ?\n\t\t\t\tresult.map(([name, value]) => {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn [String(name).toLowerCase(), String(value)];\n\t\t\t\t}) :\n\t\t\t\tundefined;\n\n\t\tsuper(result);\n\n\t\t// Returning a Proxy that will lowercase key names, validate parameters and sort keys\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn new Proxy(this, {\n\t\t\tget(target, p, receiver) {\n\t\t\t\tswitch (p) {\n\t\t\t\t\tcase 'append':\n\t\t\t\t\tcase 'set':\n\t\t\t\t\t\treturn (name, value) => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase(),\n\t\t\t\t\t\t\t\tString(value)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'delete':\n\t\t\t\t\tcase 'has':\n\t\t\t\t\tcase 'getAll':\n\t\t\t\t\t\treturn name => {\n\t\t\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\t\t\treturn URLSearchParams.prototype[p].call(\n\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\tString(name).toLowerCase()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t};\n\n\t\t\t\t\tcase 'keys':\n\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\ttarget.sort();\n\t\t\t\t\t\t\treturn new Set(URLSearchParams.prototype.keys.call(target)).keys();\n\t\t\t\t\t\t};\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn Reflect.get(target, p, receiver);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t/* c8 ignore next */\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn this.constructor.name;\n\t}\n\n\ttoString() {\n\t\treturn Object.prototype.toString.call(this);\n\t}\n\n\tget(name) {\n\t\tconst values = this.getAll(name);\n\t\tif (values.length === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet value = values.join(', ');\n\t\tif (/^content-encoding$/i.test(name)) {\n\t\t\tvalue = value.toLowerCase();\n\t\t}\n\n\t\treturn value;\n\t}\n\n\tforEach(callback, thisArg = undefined) {\n\t\tfor (const name of this.keys()) {\n\t\t\tReflect.apply(callback, thisArg, [this.get(name), name, this]);\n\t\t}\n\t}\n\n\t* values() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield this.get(name);\n\t\t}\n\t}\n\n\t/**\n\t * @type {() => IterableIterator<[string, string]>}\n\t */\n\t* entries() {\n\t\tfor (const name of this.keys()) {\n\t\t\tyield [name, this.get(name)];\n\t\t}\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.entries();\n\t}\n\n\t/**\n\t * Node-fetch non-spec method\n\t * returning all headers and their values as array\n\t * @returns {Record<string, string[]>}\n\t */\n\traw() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tresult[key] = this.getAll(key);\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\t/**\n\t * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n\t */\n\t[Symbol.for('nodejs.util.inspect.custom')]() {\n\t\treturn [...this.keys()].reduce((result, key) => {\n\t\t\tconst values = this.getAll(key);\n\t\t\t// Http.request() only supports string as Host header.\n\t\t\t// This hack makes specifying custom Host header possible.\n\t\t\tif (key === 'host') {\n\t\t\t\tresult[key] = values[0];\n\t\t\t} else {\n\t\t\t\tresult[key] = values.length > 1 ? values : values[0];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, {});\n\t}\n}\n\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\nObject.defineProperties(\n\tHeaders.prototype,\n\t['get', 'entries', 'forEach', 'values'].reduce((result, property) => {\n\t\tresult[property] = {enumerable: true};\n\t\treturn result;\n\t}, {})\n);\n\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\nexport function fromRawHeaders(headers = []) {\n\treturn new Headers(\n\t\theaders\n\t\t\t// Split into pairs\n\t\t\t.reduce((result, value, index, array) => {\n\t\t\t\tif (index % 2 === 0) {\n\t\t\t\t\tresult.push(array.slice(index, index + 2));\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t}, [])\n\t\t\t.filter(([name, value]) => {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateHeaderName(name);\n\t\t\t\t\tvalidateHeaderValue(name, String(value));\n\t\t\t\t\treturn true;\n\t\t\t\t} catch {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t})\n\n\t);\n}\n","const redirectStatus = new Set([301, 302, 303, 307, 308]);\n\n/**\n * Redirect code matching\n *\n * @param {number} code - Status code\n * @return {boolean}\n */\nexport const isRedirect = code => {\n\treturn redirectStatus.has(code);\n};\n","/**\n * Response.js\n *\n * Response class provides content decoding\n */\n\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType} from './body.js';\nimport {isRedirect} from './utils/is-redirect.js';\n\nconst INTERNALS = Symbol('Response internals');\n\n/**\n * Response class\n *\n * Ref: https://fetch.spec.whatwg.org/#response-class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Response extends Body {\n\tconstructor(body = null, options = {}) {\n\t\tsuper(body, options);\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition\n\t\tconst status = options.status != null ? options.status : 200;\n\n\t\tconst headers = new Headers(options.headers);\n\n\t\tif (body !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\ttype: 'default',\n\t\t\turl: options.url,\n\t\t\tstatus,\n\t\t\tstatusText: options.statusText || '',\n\t\t\theaders,\n\t\t\tcounter: options.counter,\n\t\t\thighWaterMark: options.highWaterMark\n\t\t};\n\t}\n\n\tget type() {\n\t\treturn this[INTERNALS].type;\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS].status;\n\t}\n\n\t/**\n\t * Convenience property representing if the request ended normally\n\t */\n\tget ok() {\n\t\treturn this[INTERNALS].status >= 200 && this[INTERNALS].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget highWaterMark() {\n\t\treturn this[INTERNALS].highWaterMark;\n\t}\n\n\t/**\n\t * Clone this response\n\t *\n\t * @return  Response\n\t */\n\tclone() {\n\t\treturn new Response(clone(this, this.highWaterMark), {\n\t\t\ttype: this.type,\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected,\n\t\t\tsize: this.size,\n\t\t\thighWaterMark: this.highWaterMark\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} url    The URL that the new response is to originate from.\n\t * @param {number} status An optional status code for the response (e.g., 302.)\n\t * @returns {Response}    A Response object.\n\t */\n\tstatic redirect(url, status = 302) {\n\t\tif (!isRedirect(status)) {\n\t\t\tthrow new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n\t\t}\n\n\t\treturn new Response(null, {\n\t\t\theaders: {\n\t\t\t\tlocation: new URL(url).toString()\n\t\t\t},\n\t\t\tstatus\n\t\t});\n\t}\n\n\tstatic error() {\n\t\tconst response = new Response(null, {status: 0, statusText: ''});\n\t\tresponse[INTERNALS].type = 'error';\n\t\treturn response;\n\t}\n\n\tstatic json(data = undefined, init = {}) {\n\t\tconst body = JSON.stringify(data);\n\n\t\tif (body === undefined) {\n\t\t\tthrow new TypeError('data is not JSON serializable');\n\t\t}\n\n\t\tconst headers = new Headers(init && init.headers);\n\n\t\tif (!headers.has('content-type')) {\n\t\t\theaders.set('content-type', 'application/json');\n\t\t}\n\n\t\treturn new Response(body, {\n\t\t\t...init,\n\t\t\theaders\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Response';\n\t}\n}\n\nObject.defineProperties(Response.prototype, {\n\ttype: {enumerable: true},\n\turl: {enumerable: true},\n\tstatus: {enumerable: true},\n\tok: {enumerable: true},\n\tredirected: {enumerable: true},\n\tstatusText: {enumerable: true},\n\theaders: {enumerable: true},\n\tclone: {enumerable: true}\n});\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:url\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"node:net\");","import {isIP} from 'node:net';\n\n/**\n * @external URL\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}\n */\n\n/**\n * @module utils/referrer\n * @private\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}\n * @param {string} URL\n * @param {boolean} [originOnly=false]\n */\nexport function stripURLForUseAsAReferrer(url, originOnly = false) {\n\t// 1. If url is null, return no referrer.\n\tif (url == null) { // eslint-disable-line no-eq-null, eqeqeq\n\t\treturn 'no-referrer';\n\t}\n\n\turl = new URL(url);\n\n\t// 2. If url's scheme is a local scheme, then return no referrer.\n\tif (/^(about|blob|data):$/.test(url.protocol)) {\n\t\treturn 'no-referrer';\n\t}\n\n\t// 3. Set url's username to the empty string.\n\turl.username = '';\n\n\t// 4. Set url's password to null.\n\t// Note: `null` appears to be a mistake as this actually results in the password being `\"null\"`.\n\turl.password = '';\n\n\t// 5. Set url's fragment to null.\n\t// Note: `null` appears to be a mistake as this actually results in the fragment being `\"#null\"`.\n\turl.hash = '';\n\n\t// 6. If the origin-only flag is true, then:\n\tif (originOnly) {\n\t\t// 6.1. Set url's path to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the path being `\"/null\"`.\n\t\turl.pathname = '';\n\n\t\t// 6.2. Set url's query to null.\n\t\t// Note: `null` appears to be a mistake as this actually results in the query being `\"?null\"`.\n\t\turl.search = '';\n\t}\n\n\t// 7. Return url.\n\treturn url;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}\n */\nexport const ReferrerPolicy = new Set([\n\t'',\n\t'no-referrer',\n\t'no-referrer-when-downgrade',\n\t'same-origin',\n\t'origin',\n\t'strict-origin',\n\t'origin-when-cross-origin',\n\t'strict-origin-when-cross-origin',\n\t'unsafe-url'\n]);\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}\n */\nexport const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}\n * @param {string} referrerPolicy\n * @returns {string} referrerPolicy\n */\nexport function validateReferrerPolicy(referrerPolicy) {\n\tif (!ReferrerPolicy.has(referrerPolicy)) {\n\t\tthrow new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n\t}\n\n\treturn referrerPolicy;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isOriginPotentiallyTrustworthy(url) {\n\t// 1. If origin is an opaque origin, return \"Not Trustworthy\".\n\t// Not applicable\n\n\t// 2. Assert: origin is a tuple origin.\n\t// Not for implementations\n\n\t// 3. If origin's scheme is either \"https\" or \"wss\", return \"Potentially Trustworthy\".\n\tif (/^(http|ws)s:$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return \"Potentially Trustworthy\".\n\tconst hostIp = url.host.replace(/(^\\[)|(]$)/g, '');\n\tconst hostIPVersion = isIP(hostIp);\n\n\tif (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\tif (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n\t\treturn true;\n\t}\n\n\t// 5. If origin's host component is \"localhost\" or falls within \".localhost\", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return \"Potentially Trustworthy\".\n\t// We are returning FALSE here because we cannot ensure conformance to\n\t// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)\n\tif (url.host === 'localhost' || url.host.endsWith('.localhost')) {\n\t\treturn false;\n\t}\n\n\t// 6. If origin's scheme component is file, return \"Potentially Trustworthy\".\n\tif (url.protocol === 'file:') {\n\t\treturn true;\n\t}\n\n\t// 7. If origin's scheme component is one which the user agent considers to be authenticated, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 8. If origin has been configured as a trustworthy origin, return \"Potentially Trustworthy\".\n\t// Not supported\n\n\t// 9. Return \"Not Trustworthy\".\n\treturn false;\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}\n * @param {external:URL} url\n * @returns `true`: \"Potentially Trustworthy\", `false`: \"Not Trustworthy\"\n */\nexport function isUrlPotentiallyTrustworthy(url) {\n\t// 1. If url is \"about:blank\" or \"about:srcdoc\", return \"Potentially Trustworthy\".\n\tif (/^about:(blank|srcdoc)$/.test(url)) {\n\t\treturn true;\n\t}\n\n\t// 2. If url's scheme is \"data\", return \"Potentially Trustworthy\".\n\tif (url.protocol === 'data:') {\n\t\treturn true;\n\t}\n\n\t// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were\n\t// created. Therefore, blobs created in a trustworthy origin will themselves be potentially\n\t// trustworthy.\n\tif (/^(blob|filesystem):$/.test(url.protocol)) {\n\t\treturn true;\n\t}\n\n\t// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.\n\treturn isOriginPotentiallyTrustworthy(url);\n}\n\n/**\n * Modifies the referrerURL to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerURLCallback\n * @param {external:URL} referrerURL\n * @returns {external:URL} modified referrerURL\n */\n\n/**\n * Modifies the referrerOrigin to enforce any extra security policy considerations.\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7\n * @callback module:utils/referrer~referrerOriginCallback\n * @param {external:URL} referrerOrigin\n * @returns {external:URL} modified referrerOrigin\n */\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}\n * @param {Request} request\n * @param {object} o\n * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback\n * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback\n * @returns {external:URL} Request's referrer\n */\nexport function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {\n\t// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for\n\t// these cases:\n\t// > Note: If request's referrer is \"no-referrer\", Fetch will not call into this algorithm.\n\t// > Note: If request's referrer policy is the empty string, Fetch will not call into this\n\t// > algorithm.\n\tif (request.referrer === 'no-referrer' || request.referrerPolicy === '') {\n\t\treturn null;\n\t}\n\n\t// 1. Let policy be request's associated referrer policy.\n\tconst policy = request.referrerPolicy;\n\n\t// 2. Let environment be request's client.\n\t// not applicable to node.js\n\n\t// 3. Switch on request's referrer:\n\tif (request.referrer === 'about:client') {\n\t\treturn 'no-referrer';\n\t}\n\n\t// \"a URL\": Let referrerSource be request's referrer.\n\tconst referrerSource = request.referrer;\n\n\t// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.\n\tlet referrerURL = stripURLForUseAsAReferrer(referrerSource);\n\n\t// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the\n\t//    origin-only flag set to true.\n\tlet referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n\n\t// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set\n\t//    referrerURL to referrerOrigin.\n\tif (referrerURL.toString().length > 4096) {\n\t\treferrerURL = referrerOrigin;\n\t}\n\n\t// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary\n\t//    policy considerations in the interests of minimizing data leakage. For example, the user\n\t//    agent could strip the URL down to an origin, modify its host, replace it with an empty\n\t//    string, etc.\n\tif (referrerURLCallback) {\n\t\treferrerURL = referrerURLCallback(referrerURL);\n\t}\n\n\tif (referrerOriginCallback) {\n\t\treferrerOrigin = referrerOriginCallback(referrerOrigin);\n\t}\n\n\t// 8.Execute the statements corresponding to the value of policy:\n\tconst currentURL = new URL(request.url);\n\n\tswitch (policy) {\n\t\tcase 'no-referrer':\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin':\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'unsafe-url':\n\t\t\treturn referrerURL;\n\n\t\tcase 'strict-origin':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerOrigin.\n\t\t\treturn referrerOrigin.toString();\n\n\t\tcase 'strict-origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 3. Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'same-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// 2. Return no referrer.\n\t\t\treturn 'no-referrer';\n\n\t\tcase 'origin-when-cross-origin':\n\t\t\t// 1. If the origin of referrerURL and the origin of request's current URL are the same, then\n\t\t\t//    return referrerURL.\n\t\t\tif (referrerURL.origin === currentURL.origin) {\n\t\t\t\treturn referrerURL;\n\t\t\t}\n\n\t\t\t// Return referrerOrigin.\n\t\t\treturn referrerOrigin;\n\n\t\tcase 'no-referrer-when-downgrade':\n\t\t\t// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a\n\t\t\t//    potentially trustworthy URL, then return no referrer.\n\t\t\tif (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n\t\t\t\treturn 'no-referrer';\n\t\t\t}\n\n\t\t\t// 2. Return referrerURL.\n\t\t\treturn referrerURL;\n\n\t\tdefault:\n\t\t\tthrow new TypeError(`Invalid referrerPolicy: ${policy}`);\n\t}\n}\n\n/**\n * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}\n * @param {Headers} headers Response headers\n * @returns {string} policy\n */\nexport function parseReferrerPolicyFromHeader(headers) {\n\t// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`\n\t//    and response’s header list.\n\tconst policyTokens = (headers.get('referrer-policy') || '').split(/[,\\s]+/);\n\n\t// 2. Let policy be the empty string.\n\tlet policy = '';\n\n\t// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty\n\t//    string, then set policy to token.\n\t// Note: This algorithm loops over multiple policy values to allow deployment of new policy\n\t// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.\n\tfor (const token of policyTokens) {\n\t\tif (token && ReferrerPolicy.has(token)) {\n\t\t\tpolicy = token;\n\t\t}\n\t}\n\n\t// 4. Return policy.\n\treturn policy;\n}\n","/**\n * Request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport {format as formatUrl} from 'node:url';\nimport {deprecate} from 'node:util';\nimport Headers from './headers.js';\nimport Body, {clone, extractContentType, getTotalBytes} from './body.js';\nimport {isAbortSignal} from './utils/is.js';\nimport {getSearch} from './utils/get-search.js';\nimport {\n\tvalidateReferrerPolicy, determineRequestsReferrer, DEFAULT_REFERRER_POLICY\n} from './utils/referrer.js';\n\nconst INTERNALS = Symbol('Request internals');\n\n/**\n * Check if `obj` is an instance of Request.\n *\n * @param  {*} object\n * @return {boolean}\n */\nconst isRequest = object => {\n\treturn (\n\t\ttypeof object === 'object' &&\n\t\ttypeof object[INTERNALS] === 'object'\n\t);\n};\n\nconst doBadDataWarn = deprecate(() => {},\n\t'.data is not a valid RequestInit property, use .body instead',\n\t'https://github.com/node-fetch/node-fetch/issues/1000 (request)');\n\n/**\n * Request class\n *\n * Ref: https://fetch.spec.whatwg.org/#request-class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nexport default class Request extends Body {\n\tconstructor(input, init = {}) {\n\t\tlet parsedURL;\n\n\t\t// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)\n\t\tif (isRequest(input)) {\n\t\t\tparsedURL = new URL(input.url);\n\t\t} else {\n\t\t\tparsedURL = new URL(input);\n\t\t\tinput = {};\n\t\t}\n\n\t\tif (parsedURL.username !== '' || parsedURL.password !== '') {\n\t\t\tthrow new TypeError(`${parsedURL} is an url with embedded credentials.`);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tif (/^(delete|get|head|options|post|put)$/i.test(method)) {\n\t\t\tmethod = method.toUpperCase();\n\t\t}\n\n\t\tif (!isRequest(init) && 'data' in init) {\n\t\t\tdoBadDataWarn();\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif ((init.body != null || (isRequest(input) && input.body !== null)) &&\n\t\t\t(method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tconst inputBody = init.body ?\n\t\t\tinit.body :\n\t\t\t(isRequest(input) && input.body !== null ?\n\t\t\t\tclone(input) :\n\t\t\t\tnull);\n\n\t\tsuper(inputBody, {\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody !== null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody, this);\n\t\t\tif (contentType) {\n\t\t\t\theaders.set('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ?\n\t\t\tinput.signal :\n\t\t\tnull;\n\t\tif ('signal' in init) {\n\t\t\tsignal = init.signal;\n\t\t}\n\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');\n\t\t}\n\n\t\t// §5.4, Request constructor steps, step 15.1\n\t\t// eslint-disable-next-line no-eq-null, eqeqeq\n\t\tlet referrer = init.referrer == null ? input.referrer : init.referrer;\n\t\tif (referrer === '') {\n\t\t\t// §5.4, Request constructor steps, step 15.2\n\t\t\treferrer = 'no-referrer';\n\t\t} else if (referrer) {\n\t\t\t// §5.4, Request constructor steps, step 15.3.1, 15.3.2\n\t\t\tconst parsedReferrer = new URL(referrer);\n\t\t\t// §5.4, Request constructor steps, step 15.3.3, 15.3.4\n\t\t\treferrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;\n\t\t} else {\n\t\t\treferrer = undefined;\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal,\n\t\t\treferrer\n\t\t};\n\n\t\t// Node-fetch-only options\n\t\tthis.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;\n\t\tthis.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t\tthis.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n\t\tthis.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n\n\t\t// §5.4, Request constructor steps, step 16.\n\t\t// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy\n\t\tthis.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';\n\t}\n\n\t/** @returns {string} */\n\tget method() {\n\t\treturn this[INTERNALS].method;\n\t}\n\n\t/** @returns {string} */\n\tget url() {\n\t\treturn formatUrl(this[INTERNALS].parsedURL);\n\t}\n\n\t/** @returns {Headers} */\n\tget headers() {\n\t\treturn this[INTERNALS].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS].redirect;\n\t}\n\n\t/** @returns {AbortSignal} */\n\tget signal() {\n\t\treturn this[INTERNALS].signal;\n\t}\n\n\t// https://fetch.spec.whatwg.org/#dom-request-referrer\n\tget referrer() {\n\t\tif (this[INTERNALS].referrer === 'no-referrer') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer === 'client') {\n\t\t\treturn 'about:client';\n\t\t}\n\n\t\tif (this[INTERNALS].referrer) {\n\t\t\treturn this[INTERNALS].referrer.toString();\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget referrerPolicy() {\n\t\treturn this[INTERNALS].referrerPolicy;\n\t}\n\n\tset referrerPolicy(referrerPolicy) {\n\t\tthis[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n\t}\n\n\t/**\n\t * Clone this request\n\t *\n\t * @return  Request\n\t */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn 'Request';\n\t}\n}\n\nObject.defineProperties(Request.prototype, {\n\tmethod: {enumerable: true},\n\turl: {enumerable: true},\n\theaders: {enumerable: true},\n\tredirect: {enumerable: true},\n\tclone: {enumerable: true},\n\tsignal: {enumerable: true},\n\treferrer: {enumerable: true},\n\treferrerPolicy: {enumerable: true}\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param {Request} request - A Request instance\n * @return The options object to be passed to http.request\n */\nexport const getNodeRequestOptions = request => {\n\tconst {parsedURL} = request[INTERNALS];\n\tconst headers = new Headers(request[INTERNALS].headers);\n\n\t// Fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body === null && /^(post|put)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\n\tif (request.body !== null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\t// Set Content-Length if totalBytes is a number (that is not NaN)\n\t\tif (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// 4.1. Main fetch, step 2.6\n\t// > If request's referrer policy is the empty string, then set request's referrer policy to the\n\t// > default referrer policy.\n\tif (request.referrerPolicy === '') {\n\t\trequest.referrerPolicy = DEFAULT_REFERRER_POLICY;\n\t}\n\n\t// 4.1. Main fetch, step 2.7\n\t// > If request's referrer is not \"no-referrer\", set request's referrer to the result of invoking\n\t// > determine request's referrer.\n\tif (request.referrer && request.referrer !== 'no-referrer') {\n\t\trequest[INTERNALS].referrer = determineRequestsReferrer(request);\n\t} else {\n\t\trequest[INTERNALS].referrer = 'no-referrer';\n\t}\n\n\t// 4.5. HTTP-network-or-cache fetch, step 6.9\n\t// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized\n\t// >  and isomorphic encoded, to httpRequest's header list.\n\tif (request[INTERNALS].referrer instanceof URL) {\n\t\theaders.set('Referer', request.referrer);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip, deflate, br');\n\t}\n\n\tlet {agent} = request;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\tconst search = getSearch(parsedURL);\n\n\t// Pass the full URL directly to request(), but overwrite the following\n\t// options:\n\tconst options = {\n\t\t// Overwrite search to retain trailing ? (issue #776)\n\t\tpath: parsedURL.pathname + search,\n\t\t// The following options are not expressed in the URL\n\t\tmethod: request.method,\n\t\theaders: headers[Symbol.for('nodejs.util.inspect.custom')](),\n\t\tinsecureHTTPParser: request.insecureHTTPParser,\n\t\tagent\n\t};\n\n\treturn {\n\t\t/** @type {URL} */\n\t\tparsedURL,\n\t\toptions\n\t};\n};\n","import {FetchBaseError} from './base.js';\n\n/**\n * AbortError interface for cancelled requests\n */\nexport class AbortError extends FetchBaseError {\n\tconstructor(message, type = 'aborted') {\n\t\tsuper(message, type);\n\t}\n}\n","/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'node:http';\nimport https from 'node:https';\nimport zlib from 'node:zlib';\nimport Stream, {PassThrough, pipeline as pump} from 'node:stream';\nimport {Buffer} from 'node:buffer';\n\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, clone} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {FormData} from 'formdata-polyfill/esm.min.js';\nimport {isDomainOrSubdomain, isSameProtocol} from './utils/is.js';\nimport {parseReferrerPolicyFromHeader} from './utils/referrer.js';\nimport {\n\tBlob,\n\tFile,\n\tfileFromSync,\n\tfileFrom,\n\tblobFromSync,\n\tblobFrom\n} from 'fetch-blob/from.js';\n\nexport {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\nexport {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {*} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nexport default async function fetch(url, options_) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst {parsedURL, options} = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(parsedURL.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (parsedURL.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url);\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (parsedURL.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\tlet response = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\n\t\t\tif (!response || !response.body) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(parsedURL.toString(), options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', error => {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, error => {\n\t\t\tif (response && response.body) {\n\t\t\t\tresponse.body.destroy(error);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (process.version < 'v14') {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\tlet endedWithEventsCount;\n\t\t\t\ts.prependListener('end', () => {\n\t\t\t\t\tendedWithEventsCount = s._eventsCount;\n\t\t\t\t});\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && endedWithEventsCount < s._eventsCount && !hadError) {\n\t\t\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', response_ => {\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(response_.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL(location, request.url);\n\t\t\t\t} catch {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Nothing to do\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: clone(request),\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size,\n\t\t\t\t\t\t\treferrer: request.referrer,\n\t\t\t\t\t\t\treferrerPolicy: request.referrerPolicy\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// when forwarding sensitive headers like \"Authorization\",\n\t\t\t\t\t\t// \"WWW-Authenticate\", and \"Cookie\" to untrusted targets,\n\t\t\t\t\t\t// headers will be ignored when following a redirect to a domain\n\t\t\t\t\t\t// that is not a subdomain match or exact match of the initial domain.\n\t\t\t\t\t\t// For example, a redirect from \"foo.com\" to either \"foo.com\" or \"sub.foo.com\"\n\t\t\t\t\t\t// will forward the sensitive headers, but a redirect to \"bar.com\" will not.\n\t\t\t\t\t\t// headers will also be ignored when following a redirect to a domain using\n\t\t\t\t\t\t// a different protocol. For example, a redirect from \"https://foo.com\" to \"http://foo.com\"\n\t\t\t\t\t\t// will not forward the sensitive headers\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOptions.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 14\n\t\t\t\t\t\tconst responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n\t\t\t\t\t\tif (responseReferrerPolicy) {\n\t\t\t\t\t\t\trequestOptions.referrerPolicy = responseReferrerPolicy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOptions)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), error => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), error => {\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.once('end', () => {\n\t\t\t\t\t// Some old IIS servers return zero-length OK deflate responses, so\n\t\t\t\t\t// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(body, responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\t// eslint-disable-next-line promise/prefer-await-to-then\n\t\twriteToStream(request_, request).catch(reject);\n\t});\n}\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tconst LAST_CHUNK = Buffer.from('0\\r\\n\\r\\n');\n\n\tlet isChunkedTransfer = false;\n\tlet properLastChunkReceived = false;\n\tlet previousChunk;\n\n\trequest.on('response', response => {\n\t\tconst {headers} = response;\n\t\tisChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];\n\t});\n\n\trequest.on('socket', socket => {\n\t\tconst onSocketClose = () => {\n\t\t\tif (isChunkedTransfer && !properLastChunkReceived) {\n\t\t\t\tconst error = new Error('Premature close');\n\t\t\t\terror.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\terrorCallback(error);\n\t\t\t}\n\t\t};\n\n\t\tconst onData = buf => {\n\t\t\tproperLastChunkReceived = Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n\n\t\t\t// Sometimes final 0-length chunk and end of message code are in separate packets\n\t\t\tif (!properLastChunkReceived && previousChunk) {\n\t\t\t\tproperLastChunkReceived = (\n\t\t\t\t\tBuffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&\n\t\t\t\t\tBuffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpreviousChunk = buf;\n\t\t};\n\n\t\tsocket.prependListener('close', onSocketClose);\n\t\tsocket.on('data', onData);\n\n\t\trequest.on('close', () => {\n\t\t\tsocket.removeListener('close', onSocketClose);\n\t\t\tsocket.removeListener('data', onData);\n\t\t});\n\t});\n}\n","export const getSearch = parsedURL => {\n\tif (parsedURL.search) {\n\t\treturn parsedURL.search;\n\t}\n\n\tconst lastOffset = parsedURL.href.length - 1;\n\tconst hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');\n\treturn parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';\n};\n","/**\n * Returns a `Buffer` instance from the given data URI `uri`.\n *\n * @param {String} uri Data URI to turn into a Buffer instance\n * @returns {Buffer} Buffer instance from Data URI\n * @api public\n */\nexport function dataUriToBuffer(uri) {\n    if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n    }\n    // strip newlines\n    uri = uri.replace(/\\r?\\n/g, '');\n    // split the URI up into the \"metadata\" and the \"data\" portions\n    const firstComma = uri.indexOf(',');\n    if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError('malformed data: URI');\n    }\n    // remove the \"data:\" scheme and parse the metadata\n    const meta = uri.substring(5, firstComma).split(';');\n    let charset = '';\n    let base64 = false;\n    const type = meta[0] || 'text/plain';\n    let typeFull = type;\n    for (let i = 1; i < meta.length; i++) {\n        if (meta[i] === 'base64') {\n            base64 = true;\n        }\n        else {\n            typeFull += `;${meta[i]}`;\n            if (meta[i].indexOf('charset=') === 0) {\n                charset = meta[i].substring(8);\n            }\n        }\n    }\n    // defaults to US-ASCII only if type is not provided\n    if (!meta[0] && !charset.length) {\n        typeFull += ';charset=US-ASCII';\n        charset = 'US-ASCII';\n    }\n    // get the encoded data portion and decode URI-encoded chars\n    const encoding = base64 ? 'base64' : 'ascii';\n    const data = unescape(uri.substring(firstComma + 1));\n    const buffer = Buffer.from(data, encoding);\n    // set `.type` and `.typeFull` properties to MIME type\n    buffer.type = type;\n    buffer.typeFull = typeFull;\n    // set the `.charset` property\n    buffer.charset = charset;\n    return buffer;\n}\nexport default dataUriToBuffer;\n//# sourceMappingURL=index.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".extension.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as vscode from 'vscode';\r\nimport fetch from 'node-fetch';\r\n\r\nlet myStatusBarItem: vscode.StatusBarItem;\r\nlet config = vscode.workspace.getConfiguration();\r\nlet userId = config.get('conf.dota-extension.user-dota-id');\r\n\r\nexport async function activate({ subscriptions }: vscode.ExtensionContext) {\r\n\tconst updateIdCommand = 'dota-extension.update-user-id';\r\n\tsubscriptions.push(vscode.commands.registerCommand(updateIdCommand, async () => {\r\n\t\tlet userInput = await vscode.window.showInputBox({\r\n\t\t\tplaceHolder: \"Dota ID\",\r\n\t\t\tprompt: \"Enter your dota ID\",\r\n\t\t\tvalue: `${userId}`\r\n\t\t});\r\n\r\n\t\tif (userInput !== null) {\r\n\t\t\tuserId = userInput;\r\n\t\t}\r\n\r\n\t\tconfig.update('conf.dota-extension.user-dota-id', userId, vscode.ConfigurationTarget.Global);\r\n\t\tawait updateStatusBarItem();\r\n\t}));\r\n\r\n\tconst lastGameIdCommand = 'dota-extension.show-last-game';\r\n\tsubscriptions.push(vscode.commands.registerCommand(lastGameIdCommand, async () => {\r\n\t\tconst response = await fetch(`https://api.opendota.com/api/players/${userId}/recentMatches`);\r\n\t\t\r\n\t\tlet text = await response.text();\r\n\r\n\t\tlet json = JSON.parse(text)[0];\r\n\t\t\r\n\t\tlet duration = `${get2Numbers(Math.floor(json['duration'] / 60))}:${get2Numbers(json['duration'] % 60)}`;\r\n\t\tlet result = '';\r\n\t\tif (json['player_slot'] <= 127) {\r\n\t\t\tresult = json['radiant_win'] ? 'Victory' : 'Defeat';\r\n\t\t}\r\n\t\telse {\r\n\t\t\tresult = !json['radiant_win'] ? 'Victory' : 'Defeat';\r\n\t\t}\r\n\r\n\t\tlet kills = json['kills'];\r\n\t\tlet deaths = json['deaths'];\r\n\t\tlet assists = json['assists'];\r\n\r\n\t\tlet hero_id = json['hero_id'];\r\n\t\tconst heroes = await fetch(`https://api.opendota.com/api/heroes`);\r\n\t\tlet heroes_text = await heroes.text();\r\n\t\tlet heroes_json = JSON.parse(heroes_text);\r\n\t\tlet hero_name = '';\r\n\r\n\t\tfor (let i = 0; i <= heroes_json.length; i++) {\r\n\t\t\tlet hero_json = heroes_json[i];\r\n\t\t\tif (hero_json.hasOwnProperty('id') && hero_json['id'] == hero_id) {\r\n\t\t\t\thero_name = hero_json['localized_name'];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvscode.window.showInformationMessage(`${result} in the game on ${hero_name} of duration ${duration}. You got ${kills} kills` +\r\n\t\t`, died ${deaths} times and ${assists} times assisted.`);\r\n\t}));\r\n\r\n\tmyStatusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 100);\r\n\tmyStatusBarItem.tooltip = \"Show last dota game info\";\r\n\tmyStatusBarItem.command = lastGameIdCommand;\r\n\tsubscriptions.push(myStatusBarItem);\r\n\r\n\tawait updateStatusBarItem();\r\n}\r\n\r\nasync function updateStatusBarItem() {\r\n\tif (userId === null) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst response = await fetch(`https://api.opendota.com/api/players/${userId}/recentMatches`);\r\n\t\t\r\n\tlet text = await response.text();\r\n\r\n\tlet json = JSON.parse(text)[0];\r\n\tlet lastGameStartDate = new Date(json['start_time'] * 1000);\r\n\tlet lastGameStart = `${get2Numbers(lastGameStartDate.getHours())}:${get2Numbers(lastGameStartDate.getMinutes())} ` +\r\n\t`${get2Numbers(lastGameStartDate.getDay())}.${get2Numbers(lastGameStartDate.getMonth())}.` +\r\n\t`${get2Numbers(lastGameStartDate.getFullYear())}`;\r\n\t\t\r\n\tmyStatusBarItem.text = 'Last Dota 2 game time: ' + lastGameStart;\r\n\tmyStatusBarItem.show();\r\n\r\n\tsetTimeout(updateStatusBarItem, 120000);\r\n}\r\n\r\nfunction get2Numbers(x: any) {\r\n\tx = String(x);\r\n\treturn x.length == 2 ? x : `0` + x;\r\n}"],"names":["installedChunks","globalThis","DOMException","MessageChannel","port","port1","ab","ArrayBuffer","postMessage","err","constructor","name","module","exports","factory","SymbolPolyfill","Symbol","iterator","description","noop","globals","self","window","global","typeIsObject","x","rethrowAssertionErrorRejection","originalPromise","Promise","originalPromiseThen","prototype","then","originalPromiseResolve","resolve","bind","originalPromiseReject","reject","newPromise","executor","promiseResolvedWith","value","promiseRejectedWith","reason","PerformPromiseThen","promise","onFulfilled","onRejected","call","uponPromise","undefined","uponFulfillment","uponRejection","transformPromiseWith","fulfillmentHandler","rejectionHandler","setPromiseIsHandledToTrue","queueMicrotask","globalQueueMicrotask","resolvedPromise","fn","reflectCall","F","V","args","TypeError","Function","apply","promiseCall","SimpleQueue","this","_cursor","_size","_front","_elements","_next","_back","length","push","element","oldBack","newBack","QUEUE_MAX_ARRAY_SIZE","shift","oldFront","newFront","oldCursor","newCursor","elements","forEach","callback","i","node","peek","front","cursor","ReadableStreamReaderGenericInitialize","reader","stream","_ownerReadableStream","_reader","_state","defaultReaderClosedPromiseInitialize","defaultReaderClosedPromiseResolve","defaultReaderClosedPromiseInitializeAsResolved","defaultReaderClosedPromiseInitializeAsRejected","_storedError","ReadableStreamReaderGenericCancel","ReadableStreamCancel","ReadableStreamReaderGenericRelease","defaultReaderClosedPromiseReject","defaultReaderClosedPromiseResetToRejected","readerLockException","_closedPromise","_closedPromise_resolve","_closedPromise_reject","AbortSteps","ErrorSteps","CancelSteps","PullSteps","NumberIsFinite","Number","isFinite","MathTrunc","Math","trunc","v","ceil","floor","assertDictionary","obj","context","assertFunction","assertObject","isObject","assertRequiredArgument","position","assertRequiredField","field","convertUnrestrictedDouble","censorNegativeZero","convertUnsignedLongLongWithEnforceRange","upperBound","MAX_SAFE_INTEGER","integerPart","assertReadableStream","IsReadableStream","AcquireReadableStreamDefaultReader","ReadableStreamDefaultReader","ReadableStreamAddReadRequest","readRequest","_readRequests","ReadableStreamFulfillReadRequest","chunk","done","_closeSteps","_chunkSteps","ReadableStreamGetNumReadRequests","ReadableStreamHasDefaultReader","IsReadableStreamDefaultReader","IsReadableStreamLocked","closed","defaultReaderBrandCheckException","cancel","read","resolvePromise","rejectPromise","ReadableStreamDefaultReaderRead","_errorSteps","e","releaseLock","Object","hasOwnProperty","_disturbed","_readableStreamController","defineProperties","enumerable","toStringTag","defineProperty","configurable","AsyncIteratorPrototype","getPrototypeOf","async","ReadableStreamAsyncIteratorImpl","preventCancel","_ongoingPromise","_isFinished","_preventCancel","next","nextSteps","_nextSteps","return","returnSteps","_returnSteps","result","ReadableStreamAsyncIteratorPrototype","IsReadableStreamAsyncIterator","_asyncIteratorImpl","streamAsyncIteratorBrandCheckException","_a","setPrototypeOf","NumberIsNaN","isNaN","CreateArrayFromList","slice","CopyDataBlockBytes","dest","destOffset","src","srcOffset","n","Uint8Array","set","ArrayBufferSlice","buffer","begin","end","CloneAsUint8Array","O","byteOffset","byteLength","DequeueValue","container","pair","_queue","_queueTotalSize","size","EnqueueValueWithSize","Infinity","RangeError","ResetQueue","ReadableStreamBYOBRequest","view","IsReadableStreamBYOBRequest","byobRequestBrandCheckException","_view","respond","bytesWritten","_associatedReadableByteStreamController","ReadableByteStreamControllerRespond","respondWithNewView","isView","ReadableByteStreamControllerRespondWithNewView","ReadableByteStreamController","byobRequest","IsReadableByteStreamController","byteStreamControllerBrandCheckException","ReadableByteStreamControllerGetBYOBRequest","desiredSize","ReadableByteStreamControllerGetDesiredSize","close","_closeRequested","state","_controlledReadableByteStream","ReadableByteStreamControllerClose","enqueue","ReadableByteStreamControllerEnqueue","error","ReadableByteStreamControllerError","ReadableByteStreamControllerClearPendingPullIntos","_cancelAlgorithm","ReadableByteStreamControllerClearAlgorithms","entry","ReadableByteStreamControllerHandleQueueDrain","autoAllocateChunkSize","_autoAllocateChunkSize","bufferE","pullIntoDescriptor","bufferByteLength","bytesFilled","elementSize","viewConstructor","readerType","_pendingPullIntos","ReadableByteStreamControllerCallPullIfNeeded","controller","shouldPull","_started","ReadableStreamHasBYOBReader","ReadableStreamGetNumReadIntoRequests","ReadableByteStreamControllerShouldCallPull","_pulling","_pullAgain","_pullAlgorithm","ReadableByteStreamControllerInvalidateBYOBRequest","ReadableByteStreamControllerCommitPullIntoDescriptor","filledView","ReadableByteStreamControllerConvertPullIntoDescriptor","readIntoRequest","_readIntoRequests","ReadableStreamFulfillReadIntoRequest","ReadableByteStreamControllerEnqueueChunkToQueue","ReadableByteStreamControllerFillPullIntoDescriptorFromQueue","currentAlignedBytes","maxBytesToCopy","min","maxBytesFilled","maxAlignedBytes","totalBytesToCopyRemaining","ready","queue","headOfQueue","bytesToCopy","destStart","ReadableByteStreamControllerFillHeadPullIntoDescriptor","ReadableStreamClose","_byobRequest","ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue","ReadableByteStreamControllerShiftPendingPullInto","ReadableByteStreamControllerRespondInternal","firstDescriptor","ReadableByteStreamControllerRespondInClosedState","remainderSize","remainder","ReadableByteStreamControllerRespondInReadableState","transferredBuffer","firstPendingPullInto","ReadableStreamError","create","request","SetUpReadableStreamBYOBRequest","_strategyHWM","viewByteLength","SetUpReadableByteStreamController","startAlgorithm","pullAlgorithm","cancelAlgorithm","highWaterMark","r","AcquireReadableStreamBYOBReader","ReadableStreamBYOBReader","ReadableStreamAddReadIntoRequest","IsReadableStreamBYOBReader","byobReaderBrandCheckException","ReadableStreamBYOBReaderRead","DataView","BYTES_PER_ELEMENT","ctor","emptyView","ReadableByteStreamControllerPullInto","ExtractHighWaterMark","strategy","defaultHWM","ExtractSizeAlgorithm","convertQueuingStrategy","init","convertQueuingStrategySize","convertUnderlyingSinkAbortCallback","original","convertUnderlyingSinkCloseCallback","convertUnderlyingSinkStartCallback","convertUnderlyingSinkWriteCallback","assertWritableStream","IsWritableStream","supportsAbortController","AbortController","WritableStream","rawUnderlyingSink","rawStrategy","underlyingSink","abort","start","type","write","convertUnderlyingSink","InitializeWritableStream","sizeAlgorithm","WritableStreamDefaultController","writeAlgorithm","closeAlgorithm","abortAlgorithm","SetUpWritableStreamDefaultController","SetUpWritableStreamDefaultControllerFromUnderlyingSink","locked","streamBrandCheckException$2","IsWritableStreamLocked","WritableStreamAbort","WritableStreamCloseQueuedOrInFlight","WritableStreamClose","getWriter","AcquireWritableStreamDefaultWriter","WritableStreamDefaultWriter","_writer","_writableStreamController","_writeRequests","_inFlightWriteRequest","_closeRequest","_inFlightCloseRequest","_pendingAbortRequest","_backpressure","_abortReason","_abortController","_promise","wasAlreadyErroring","_resolve","_reject","_reason","_wasAlreadyErroring","WritableStreamStartErroring","closeRequest","writer","defaultWriterReadyPromiseResolve","closeSentinel","WritableStreamDefaultControllerAdvanceQueueIfNeeded","WritableStreamDealWithRejection","WritableStreamFinishErroring","WritableStreamDefaultWriterEnsureReadyPromiseRejected","WritableStreamHasOperationMarkedInFlight","storedError","writeRequest","WritableStreamRejectCloseAndClosedPromiseIfNeeded","abortRequest","defaultWriterClosedPromiseReject","WritableStreamUpdateBackpressure","backpressure","defaultWriterReadyPromiseInitialize","defaultWriterReadyPromiseReset","_ownerWritableStream","defaultWriterReadyPromiseInitializeAsResolved","defaultWriterClosedPromiseInitialize","defaultWriterReadyPromiseInitializeAsRejected","defaultWriterClosedPromiseResolve","defaultWriterClosedPromiseInitializeAsRejected","IsWritableStreamDefaultWriter","defaultWriterBrandCheckException","defaultWriterLockException","WritableStreamDefaultControllerGetDesiredSize","WritableStreamDefaultWriterGetDesiredSize","_readyPromise","WritableStreamDefaultWriterAbort","WritableStreamDefaultWriterClose","WritableStreamDefaultWriterRelease","WritableStreamDefaultWriterWrite","_readyPromiseState","defaultWriterReadyPromiseReject","defaultWriterReadyPromiseResetToRejected","releasedError","_closedPromiseState","defaultWriterClosedPromiseResetToRejected","WritableStreamDefaultWriterEnsureClosedPromiseRejected","chunkSize","_strategySizeAlgorithm","chunkSizeE","WritableStreamDefaultControllerErrorIfNeeded","WritableStreamDefaultControllerGetChunkSize","WritableStreamAddWriteRequest","enqueueE","_controlledWritableStream","WritableStreamDefaultControllerGetBackpressure","WritableStreamDefaultControllerWrite","abortReason","IsWritableStreamDefaultController","defaultControllerBrandCheckException$2","signal","WritableStreamDefaultControllerError","_abortAlgorithm","WritableStreamDefaultControllerClearAlgorithms","createAbortController","_writeAlgorithm","_closeAlgorithm","WritableStreamMarkCloseRequestInFlight","sinkClosePromise","WritableStreamFinishInFlightClose","WritableStreamFinishInFlightCloseWithError","WritableStreamDefaultControllerProcessClose","WritableStreamMarkFirstWriteRequestInFlight","WritableStreamFinishInFlightWrite","WritableStreamFinishInFlightWriteWithError","WritableStreamDefaultControllerProcessWrite","_readyPromise_resolve","_readyPromise_reject","NativeDOMException","DOMException$1","isDOMExceptionConstructor","message","Error","captureStackTrace","writable","createDOMExceptionPolyfill","ReadableStreamPipeTo","source","preventClose","preventAbort","shuttingDown","currentWrite","actions","shutdownWithAction","all","map","action","aborted","addEventListener","isOrBecomesErrored","shutdown","WritableStreamDefaultWriterCloseWithErrorPropagation","destClosed","waitForWritesToFinish","oldCurrentWrite","originalIsError","originalError","doTheRest","finalize","newError","isError","removeEventListener","resolveLoop","rejectLoop","resolveRead","rejectRead","ReadableStreamDefaultController","IsReadableStreamDefaultController","defaultControllerBrandCheckException$1","ReadableStreamDefaultControllerGetDesiredSize","ReadableStreamDefaultControllerCanCloseOrEnqueue","ReadableStreamDefaultControllerClose","ReadableStreamDefaultControllerEnqueue","ReadableStreamDefaultControllerError","ReadableStreamDefaultControllerClearAlgorithms","_controlledReadableStream","ReadableStreamDefaultControllerCallPullIfNeeded","ReadableStreamDefaultControllerShouldCallPull","SetUpReadableStreamDefaultController","convertUnderlyingSourceCancelCallback","convertUnderlyingSourcePullCallback","convertUnderlyingSourceStartCallback","convertReadableStreamType","convertReadableStreamReaderMode","mode","convertPipeOptions","options","isAbortSignal","assertAbortSignal","Boolean","ReadableStream","rawUnderlyingSource","underlyingSource","pull","convertUnderlyingDefaultOrByteSource","InitializeReadableStream","underlyingByteSource","SetUpReadableByteStreamControllerFromUnderlyingSource","SetUpReadableStreamDefaultControllerFromUnderlyingSource","streamBrandCheckException$1","getReader","rawOptions","convertReaderOptions","pipeThrough","rawTransform","transform","readable","convertReadableWritablePair","pipeTo","destination","tee","reason1","reason2","branch1","branch2","resolveCancelPromise","reading","readAgainForBranch1","readAgainForBranch2","canceled1","canceled2","cancelPromise","forwardReaderError","thisReader","pullWithDefaultReader","chunk1","chunk2","cloneE","pull1Algorithm","pull2Algorithm","pullWithBYOBReader","forBranch2","byobBranch","otherBranch","byobCanceled","clonedChunk","otherCanceled","CreateReadableByteStream","compositeReason","cancelResult","ReadableByteStreamTee","cloneForBranch2","readAgain","CreateReadableStream","ReadableStreamDefaultTee","values","impl","AcquireReadableStreamAsyncIterator","convertIteratorOptions","convertQueuingStrategyInit","asyncIterator","byteLengthSizeFunction","ByteLengthQueuingStrategy","_byteLengthQueuingStrategyHighWaterMark","IsByteLengthQueuingStrategy","byteLengthBrandCheckException","countSizeFunction","CountQueuingStrategy","_countQueuingStrategyHighWaterMark","IsCountQueuingStrategy","countBrandCheckException","convertTransformerFlushCallback","convertTransformerStartCallback","convertTransformerTransformCallback","TransformStream","rawTransformer","rawWritableStrategy","rawReadableStrategy","writableStrategy","readableStrategy","transformer","flush","readableType","writableType","convertTransformer","readableHighWaterMark","readableSizeAlgorithm","writableHighWaterMark","writableSizeAlgorithm","startPromise_resolve","startPromise","_writable","CreateWritableStream","_transformStreamController","_backpressureChangePromise","TransformStreamDefaultControllerPerformTransform","TransformStreamDefaultSinkWriteAlgorithm","_readable","flushPromise","_flushAlgorithm","TransformStreamDefaultControllerClearAlgorithms","TransformStreamError","TransformStreamDefaultSinkCloseAlgorithm","TransformStreamDefaultSinkAbortAlgorithm","TransformStreamSetBackpressure","TransformStreamDefaultSourcePullAlgorithm","TransformStreamErrorWritableAndUnblockWrite","_backpressureChangePromise_resolve","InitializeTransformStream","TransformStreamDefaultController","transformAlgorithm","TransformStreamDefaultControllerEnqueue","transformResultE","flushAlgorithm","_controlledTransformStream","_transformAlgorithm","SetUpTransformStreamDefaultController","SetUpTransformStreamDefaultControllerFromTransformer","IsTransformStream","streamBrandCheckException","IsTransformStreamDefaultController","defaultControllerBrandCheckException","terminate","TransformStreamDefaultControllerTerminate","readableController","ReadableStreamDefaultControllerHasBackpressure","require","process","emitWarning","assign","Blob","params","blob","ctrl","arrayBuffer","fileBits","fileName","arguments","super","lastModified","Date","now","String","static","hasInstance","object","test","stat","blobFromSync","path","fromBlob","statSync","blobFrom","fileFrom","fromFile","fileFromSync","BlobDataItem","mtimeMs","basename","createReadStream","toIterator","parts","clone","part","b","_Blob","blobParts","encoder","TextEncoder","encode","endings","decoder","TextDecoder","str","decode","data","offset","it","relativeStart","max","relativeEnd","span","added","subarray","toLowerCase","t","h","random","m","split","f","a","c","replace","FormData","entries","o","some","append","delete","filter","get","l","getAll","has","d","formDataToBlob","B","padStart","p","FetchBaseError","FetchError","systemError","code","errno","erroredSysCall","syscall","NAME","isURLSearchParameters","sort","isBlob","pipeline","promisify","INTERNALS","Body","body","boundary","Buffer","toString","types","disturbed","on","error_","url","bodyUsed","consumeBody","ct","headers","startsWith","formData","parameters","URLSearchParams","text","toFormData","buf","JSON","parse","accum","accumBytes","destroy","readableEnded","_readableState","ended","every","join","deprecate","json","instance","p1","p2","getBoundary","PassThrough","pipe","getNonSpecFormDataBoundary","extractContentType","validateHeaderName","validateHeaderValue","Headers","raw","method","Proxy","target","receiver","Set","keys","Reflect","thisArg","reduce","key","for","property","redirectStatus","isRedirect","Response","status","contentType","statusText","counter","ok","redirected","location","URL","response","stringify","stripURLForUseAsAReferrer","originOnly","protocol","username","password","hash","pathname","search","ReferrerPolicy","isUrlPotentiallyTrustworthy","hostIp","host","hostIPVersion","isIP","endsWith","isOriginPotentiallyTrustworthy","isRequest","doBadDataWarn","Request","input","parsedURL","toUpperCase","inputBody","referrer","parsedReferrer","redirect","follow","compress","agent","insecureHTTPParser","referrerPolicy","format","validateReferrerPolicy","AbortError","supportedSchemas","fetch","options_","contentLengthValue","totalBytes","getLengthSync","hasKnownLength","getTotalBytes","referrerURLCallback","referrerOriginCallback","policy","referrerSource","referrerURL","referrerOrigin","currentURL","origin","determineRequestsReferrer","lastOffset","href","getSearch","getNodeRequestOptions","uri","firstComma","indexOf","meta","substring","charset","base64","typeFull","encoding","unescape","from","send","emit","abortAndFinalize","request_","errorCallback","LAST_CHUNK","previousChunk","isChunkedTransfer","properLastChunkReceived","socket","onSocketClose","onData","prependListener","removeListener","fixResponseChunkedTransferBadEnding","version","s","endedWithEventsCount","_eventsCount","hadError","response_","setTimeout","index","array","fromRawHeaders","rawHeaders","statusCode","locationURL","requestOptions","orig","hostname","isDomainOrSubdomain","responseReferrerPolicy","policyTokens","token","parseReferrerPolicyFromHeader","once","responseOptions","statusMessage","codings","zlibOptions","finishFlush","writeToStream","catch","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","chunkId","promises","u","prop","moreModules","modules","chunkIds","ids","runtime","installChunk","myStatusBarItem","config","vscode","workspace","getConfiguration","userId","updateStatusBarItem","lastGameStartDate","lastGameStart","get2Numbers","getHours","getMinutes","getDay","getMonth","getFullYear","show","subscriptions","commands","registerCommand","userInput","showInputBox","placeHolder","prompt","update","ConfigurationTarget","Global","lastGameIdCommand","duration","kills","deaths","assists","hero_id","heroes","heroes_text","heroes_json","hero_name","hero_json","showInformationMessage","createStatusBarItem","StatusBarAlignment","Right","tooltip","command"],"sourceRoot":""}